{"version":3,"sources":["generators/lua/loops.js","generators/lua.js","generators/lua/colour.js","generators/lua/lists.js","generators/lua/logic.js","generators/lua/math.js","generators/lua/procedures.js","generators/lua/text.js","generators/lua/variables.js","generators/lua/variables_dynamic.js","generators/lua/all.js"],"names":["addContinueLabel","branch","indent","indexOf","CONTINUE_STATEMENT","Order","ATOMIC","HIGH","EXPONENTIATION","UNARY","MULTIPLICATIVE","ADDITIVE","CONCATENATION","RELATIONAL","AND","OR","NONE","LuaGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","workspace","nameDB_","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","code","definitions","Object","values","definitions_","join","scrubNakedValue","line","quote_","string","replace","multiline_quote_","split","map","lines","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","i","inputList","length","type","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","luaGenerator","$jscomp$tmp$exports$module$name","forBlock","generator","getFieldValue","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","g","b","colour1","colour2","ratio","elements","Array","itemCount_","element","repeatCount","item","list","getListIndex","listName","where","opt_at","mode","match","at","atOrder","listVar","getDistinctName","NameType","VARIABLE","toLowerCase","value","where1","where2","at1","at2","at1Param","at2Param","direction","input","delimiter","Error","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","INDENT","getInput","operator","OPERATORS","argument0","argument1","order","defaultArgument","value_if","value_then","value_else","repeats","getField","String","Number","isNumber","parseInt","addLoopTrap","loopVar","until","variable0","getName","startVar","endVar","increment","incValue","Math","abs","step","xfix","loop","getSurroundLoop","suppressPrefixSuffix","tuple","arg","CONSTANTS","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","varName","provideSum","func","argument2","funcName","PROCEDURE","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","hasReturnValue_","element0","element1","substring","text","start","at1Order","at2Order","end","LEFT","RIGHT","BOTH","msg","sub","from","to"],"mappings":"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","file":"lua_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for loop blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.loops');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\n/**\n * This is the text used to implement a <pre>continue</pre>.\n * It is also used to recognise <pre>continue</pre>s in generated code so that\n * the appropriate label can be put at the end of the loop body.\n * @const {string}\n */\nconst CONTINUE_STATEMENT = 'goto continue\\n';\n\n/**\n * If the loop body contains a \"goto continue\" statement, add a continue label\n * to the loop body. Slightly inefficient, as continue labels will be generated\n * in all outer loops, but this is safer than duplicating the logic of\n * blockToCode.\n *\n * @param {string} branch Generated code of the loop body\n * @param {string} indent Whitespace by which to indent a continue statement.\n * @return {string} Generated label or '' if unnecessary\n */\nfunction addContinueLabel(branch, indent) {\n  if (branch.indexOf(CONTINUE_STATEMENT) !== -1) {\n    // False positives are possible (e.g. a string literal), but are harmless.\n    return branch + indent + '::continue::\\n';\n  } else {\n    return branch;\n  }\n};\n\nluaGenerator.forBlock['controls_repeat_ext'] = function(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'math.floor(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const loopVar = generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  const code =\n      'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nluaGenerator.forBlock['controls_repeat'] =\n    luaGenerator.forBlock['controls_repeat_ext'];\n\nluaGenerator.forBlock['controls_whileUntil'] = function(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.UNARY : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\n};\n\nluaGenerator.forBlock['controls_for'] = function(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const startVar = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const endVar = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  let code = '';\n  let incValue;\n  if (stringUtils.isNumber(startVar) && stringUtils.isNumber(endVar) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(startVar) <= Number(endVar);\n    const step = Math.abs(Number(increment));\n    incValue = (up ? '' : '-') + step;\n  } else {\n    code = '';\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    incValue =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += incValue + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + '\\n';\n    } else {\n      code += 'math.abs(' + increment + ')\\n';\n    }\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\n    code += generator.INDENT + incValue + ' = -' + incValue + '\\n';\n    code += 'end\\n';\n  }\n  code +=\n      'for ' + variable0 + ' = ' + startVar + ', ' + endVar + ', ' + incValue;\n  code += ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nluaGenerator.forBlock['controls_forEach'] = function(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const code = 'for _, ' + variable0 + ' in ipairs(' + argument0 + ') do \\n' +\n      branch + 'end\\n';\n  return code;\n};\n\nluaGenerator.forBlock['controls_flow_statements'] = function(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + CONTINUE_STATEMENT;\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Lua for blocks.\n * Based on Ellen Spertus's blocky-lua project.\n * @suppress {checkTypes|globalThis}\n */\n\nimport * as goog from '../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua');\n\nimport * as stringUtils from '../core/utils/string.js';\n// import type {Block} from '../core/block.js';\nimport {CodeGenerator} from '../core/generator.js';\nimport {Names} from '../core/names.js';\n// import type {Workspace} from '../core/workspace.js';\nimport {inputTypes} from '../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,    // literals\n  // The next level was not explicit in documentation and inferred by Ellen.\n  HIGH: 1,            // Function calls, tables[]\n  EXPONENTIATION: 2,  // ^\n  UNARY: 3,           // not # - ~\n  MULTIPLICATIVE: 4,  // * / %\n  ADDITIVE: 5,        // + -\n  CONCATENATION: 6,   // ..\n  RELATIONAL: 7,      // < > <=  >= ~= ==\n  AND: 8,             // and\n  OR: 9,              // or\n  NONE: 99,\n};\n\n/**\n * Lua code generator class.\n *\n * Note: Lua is not supporting zero-indexing since the language itself is\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\n * option used for lists and text.\n */\nclass LuaGenerator extends CodeGenerator {\n  constructor(name) {\n    super(name ?? 'Lua');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // Special character\n      '_,' +\n      // From theoriginalbit's script:\n      // https://github.com/espertus/blockly-lua/issues/6\n      '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\n      'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\n      'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\n      'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\n      'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\n      'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\n      // Not included in the script, probably because it wasn't enabled:\n      'HTTP,' +\n      // Keywords (http://www.lua.org/pil/1.3.html).\n      'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,' +\n      'or,repeat,return,then,true,until,while,' +\n      // Metamethods (http://www.lua.org/manual/5.2/manual.html).\n      'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\n      // Basic functions (http://www.lua.org/manual/5.2/manual.html,\n      // section 6.1).\n      'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\n      'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\n      'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\n      // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\n      'require,package,string,table,math,bit32,io,file,os,debug'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    // Call Blockly.CodeGenerator's init.\n    super.init();\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    this.isInitialized = true;\n  };\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  };\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything. In Lua, an expression is not a legal statement, so we must assign\n   * the value to the (conventionally ignored) _.\n   * http://lua-users.org/wiki/ExpressionsAsStatements\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return 'local _ = ' + line + '\\n';\n  };\n\n  /**\n   * Encode a string as a properly escaped Lua string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Lua string.\n   * @protected\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  };\n\n  /**\n   * Encode a string as a properly escaped multiline Lua string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Lua string.\n   * @protected\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // .. '\\n' ..\n    return lines.join(' .. \\'\\\\n\\' ..\\n');\n  };\n\n  /**\n   * Common tasks for generating Lua from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Lua code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n   * @return {string} Lua code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment, '-- ') + '\\n';\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '-- ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  };\n}\n\n/**\n * Lua code generator.\n * @type {!LuaGenerator}\n */\nexport const luaGenerator = new LuaGenerator('Lua');\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for colour blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.colour');\n\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['colour_picker'] = function(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nluaGenerator.forBlock['colour_random'] = function(block, generator) {\n  // Generate a random colour.\n  const code = 'string.format(\"#%06x\", math.random(0, 2^24 - 1))';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['colour_rgb'] = function(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_('colour_rgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b)\n  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\n  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\n  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['colour_blend'] = function(block, generator) {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_('colour_blend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio)\n  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\n  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\n  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\n  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\n  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\n  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\n  local ratio = math.min(1, math.max(0, ratio))\n  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\n  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\n  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const colour1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const colour2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\n  const code =\n      functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for list blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.lists');\n\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['lists_create_empty'] = function(block, generator) {\n  // Create an empty list.\n  return ['{}', Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_create_with'] = function(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '{' + elements.join(', ') + '}';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_repeat'] = function(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('create_list_repeated', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(item, count)\n  local t = {}\n  for i = 1, count do\n    table.insert(t, item)\n  end\n  return t\nend\n  `);\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_length'] = function(block, generator) {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  return ['#' + list, Order.UNARY];\n};\n\nluaGenerator.forBlock['lists_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  const code = '#' + list + ' == 0';\n  return [code, Order.RELATIONAL];\n};\n\nluaGenerator.forBlock['lists_indexOf'] = function(block, generator) {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '{}';\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('first_index', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for k, v in ipairs(t) do\n    if v == elem then\n      return k\n    end\n  end\n  return 0\nend\n`);\n  } else {\n    functionName = generator.provideFunction_('last_index', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for i = #t, 1, -1 do\n    if t[i] == elem then\n      return i\n    end\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.HIGH];\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getListIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '1';\n  } else if (where === 'FROM_END') {\n    return '#' + listName + ' + 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return '#' + listName;\n  } else if (where === 'RANDOM') {\n    return 'math.random(#' + listName + ')';\n  } else {\n    return opt_at;\n  }\n};\n\nluaGenerator.forBlock['lists_getIndex'] = function(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const list = generator.valueToCode(block, 'VALUE', Order.HIGH) || '({})';\n\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (mode === 'REMOVE') {\n      // We can use multiple statements.\n      const atOrder =\n          (where === 'FROM_END') ? Order.ADDITIVE : Order.NONE;\n      let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n      const listVar =\n          generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n      at = getListIndex(listVar, where, at);\n      const code = listVar + ' = ' + list + '\\n' +\n          'table.remove(' + listVar + ', ' + at + ')\\n';\n      return code;\n    } else {\n      // We need to create a procedure to avoid reevaluating values.\n      const at = generator.valueToCode(block, 'AT', Order.NONE) || '1';\n      let functionName;\n      if (mode === 'GET') {\n        functionName = generator.provideFunction_(\n          'list_get_' + where.toLowerCase(), [\n          'function ' + generator.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                  ')'),\n          '  return t[' + getListIndex('t', where, 'at') + ']', 'end'\n        ]);\n      } else {  // `mode` === 'GET_REMOVE'\n        functionName =\n            generator.provideFunction_(\n              'list_remove_' + where.toLowerCase(), [\n              'function ' + generator.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n                  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n                  // we add it as a parameter.\n                  ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                      ')'),\n              '  return table.remove(t, ' + getListIndex('t', where, 'at') +\n                  ')',\n              'end'\n            ]);\n      }\n      const code = functionName + '(' + list +\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n          // pass it.\n          ((where === 'FROM_END' || where === 'FROM_START') ? ', ' + at : '') +\n          ')';\n      return [code, Order.HIGH];\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    const atOrder = (mode === 'GET' && where === 'FROM_END') ?\n        Order.ADDITIVE :\n        Order.NONE;\n    let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n    at = getListIndex(list, where, at);\n    if (mode === 'GET') {\n      const code = list + '[' + at + ']';\n      return [code, Order.HIGH];\n    } else {\n      const code = 'table.remove(' + list + ', ' + at + ')';\n      if (mode === 'GET_REMOVE') {\n        return [code, Order.HIGH];\n      } else {  // `mode` === 'REMOVE'\n        return code + '\\n';\n      }\n    }\n  }\n};\n\nluaGenerator.forBlock['lists_setIndex'] = function(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.HIGH) || '{}';\n  const mode = block.getFieldValue('MODE') || 'SET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const at = generator.valueToCode(block, 'AT', Order.ADDITIVE) || '1';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n\n  let code = '';\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    // We can use multiple statements.\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n  }\n  if (mode === 'SET') {\n    code += list + '[' + getListIndex(list, where, at) + '] = ' + value;\n  } else {  // `mode` === 'INSERT'\n    // LAST is a special case, because we want to insert\n    // *after* not *before*, the existing last element.\n    code += 'table.insert(' + list + ', ' +\n        (getListIndex(list, where, at) + (where === 'LAST' ? ' + 1' : '')) +\n        ', ' + value + ')';\n  }\n  return code + '\\n';\n};\n\nluaGenerator.forBlock['lists_getSublist'] = function(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const at1 = generator.valueToCode(block, 'AT1', Order.NONE) || '1';\n  const at2 = generator.valueToCode(block, 'AT2', Order.NONE) || '1';\n\n  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n  // we add it as a parameter.\n  const at1Param =\n      (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n  const at2Param =\n      (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n  const functionName = generator.provideFunction_(\n      'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(), `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(source${at1Param}${at2Param})\n  local t = {}\n  local start = ${getListIndex('source', where1, 'at1')}\n  local finish = ${getListIndex('source', where2, 'at2')}\n  for i = start, finish do\n    table.insert(t, source[i])\n  end\n  return t\nend\n`);\n  const code = functionName + '(' + list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n      ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n      ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_sort'] = function(block, generator) {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n\n  const functionName = generator.provideFunction_('list_sort', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, typev, direction)\n  local t = {}\n  for n,v in pairs(list) do table.insert(t, v) end\n  local compareFuncs = {\n    NUMERIC = function(a, b)\n      return (tonumber(tostring(a)) or 0)\n          < (tonumber(tostring(b)) or 0) end,\n    TEXT = function(a, b)\n      return tostring(a) < tostring(b) end,\n    IGNORE_CASE = function(a, b)\n      return string.lower(tostring(a)) < string.lower(tostring(b)) end\n  }\n  local compareTemp = compareFuncs[typev]\n  local compare = compareTemp\n  if direction == -1\n  then compare = function(a, b) return compareTemp(b, a) end\n  end\n  table.sort(t, compare)\n  return t\nend\n`);\n\n  const code =\n      functionName + '(' + list + ',\"' + type + '\", ' + direction + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_split'] = function(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.NONE);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = generator.provideFunction_('list_string_split', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input, delim)\n  local t = {}\n  local pos = 1\n  while true do\n    next_delim = string.find(input, delim, pos)\n    if next_delim == nil then\n      table.insert(t, string.sub(input, pos))\n      break\n    else\n      table.insert(t, string.sub(input, pos, next_delim-1))\n      pos = next_delim + #delim\n    end\n  end\n  return t\nend\n`);\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '{}';\n    }\n    functionName = 'table.concat';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + input + ', ' + delimiter + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['lists_reverse'] = function(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const functionName = generator.provideFunction_('list_reverse', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input)\n  local reversed = {}\n  for i = #input, 1, -1 do\n    table.insert(reversed, input[i])\n  end\n  return reversed\nend\n`);\n  const code = functionName + '(' + list + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for logic blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.logic');\n\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['controls_if'] = function(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode = generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT) + branchCode;\n    }\n    code +=\n        (n > 0 ? 'else' : '') + 'if ' + conditionCode + ' then\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += 'else\\n' + branchCode;\n  }\n  return code + 'end\\n';\n};\n\nluaGenerator.forBlock['controls_ifelse'] = luaGenerator.forBlock['controls_if'];\n\nluaGenerator.forBlock['logic_compare'] = function(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '~=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const argument0 =\n        generator.valueToCode(block, 'A', Order.RELATIONAL) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'B', Order.RELATIONAL) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Order.RELATIONAL];\n};\n\nluaGenerator.forBlock['logic_operation'] = function(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? 'and' : 'or';\n  const order = (operator === 'and') ? Order.AND : Order.OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === 'and') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nluaGenerator.forBlock['logic_negate'] = function(block, generator) {\n  // Negation.\n  const argument0 =\n        generator.valueToCode(block, 'BOOL', Order.UNARY) || 'true';\n  const code = 'not ' + argument0;\n  return [code, Order.UNARY];\n};\n\nluaGenerator.forBlock['logic_boolean'] = function(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nluaGenerator.forBlock['logic_null'] = function(block, generator) {\n  // Null data type.\n  return ['nil', Order.ATOMIC];\n};\n\nluaGenerator.forBlock['logic_ternary'] = function(block, generator) {\n  // Ternary operator.\n  const value_if = generator.valueToCode(block, 'IF', Order.AND) || 'false';\n  const value_then =\n        generator.valueToCode(block, 'THEN', Order.AND) || 'nil';\n  const value_else = generator.valueToCode(block, 'ELSE', Order.OR) || 'nil';\n  const code = value_if + ' and ' + value_then + ' or ' + value_else;\n  return [code, Order.OR];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for math blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.math');\n\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['math_number'] = function(block, generator) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code < 0 ? Order.UNARY : Order.ATOMIC;\n  return [code, order];\n};\n\nluaGenerator.forBlock['math_arithmetic'] = function(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ^ ', Order.EXPONENTIATION],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nluaGenerator.forBlock['math_single'] = function(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY) || '0';\n    return ['-' + arg, Order.UNARY];\n  }\n  if (operator === 'POW10') {\n    arg = generator.valueToCode(block, 'NUM', Order.EXPONENTIATION) || '0';\n    return ['10 ^ ' + arg, Order.EXPONENTIATION];\n  }\n  if (operator === 'ROUND') {\n    arg = generator.valueToCode(block, 'NUM', Order.ADDITIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n\n  let code;\n  switch (operator) {\n    case 'ABS':\n      code = 'math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log(' + arg + ', 10)';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'ROUND':\n      // This rounds up.  Blockly does not specify rounding direction.\n      code = 'math.floor(' + arg + ' + .5)';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(math.rad(' + arg + '))';\n      break;\n    case 'COS':\n      code = 'math.cos(math.rad(' + arg + '))';\n      break;\n    case 'TAN':\n      code = 'math.tan(math.rad(' + arg + '))';\n      break;\n    case 'ASIN':\n      code = 'math.deg(math.asin(' + arg + '))';\n      break;\n    case 'ACOS':\n      code = 'math.deg(math.acos(' + arg + '))';\n      break;\n    case 'ATAN':\n      code = 'math.deg(math.atan(' + arg + '))';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['math_constant'] = function(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['math.pi', Order.HIGH],\n    'E': ['math.exp(1)', Order.HIGH],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.HIGH],\n    'SQRT1_2': ['math.sqrt(1 / 2)', Order.HIGH],\n    'INFINITY': ['math.huge', Order.HIGH],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nluaGenerator.forBlock['math_number_property'] = function(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.HIGH],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('math_isPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n)\n  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if n == 2 or n == 3 then\n    return true\n  end\n  -- False if n is NaN, negative, is 1, or not whole.\n  -- And false if n is divisible by 2 or 3.\n  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x = 6, math.sqrt(n) + 1.5, 6 do\n    if n % (x - 1) == 0 or n % (x + 1) == 0 then\n      return false\n    end\n  end\n  return true\nend\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will produce a nan.\n    // Let's produce nil if we can determine this at compile-time.\n    if (divisor === '0') {\n      return ['nil', Order.ATOMIC];\n    }\n    // The normal trick to implement ?: with and/or doesn't work here:\n    //   divisor == 0 and nil or number_to_check % divisor == 0\n    // because nil is false, so allow a runtime failure. :-(\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nluaGenerator.forBlock['math_change'] = function(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nluaGenerator.forBlock['math_round'] = luaGenerator.forBlock['math_single'];\n// Trigonometry functions have a single operand.\nluaGenerator.forBlock['math_trig'] = luaGenerator.forBlock['math_single'];\n\nluaGenerator.forBlock['math_on_list'] = function(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let functionName;\n\n  // Functions needed in more than one case.\n  function provideSum() {\n    return generator.provideFunction_('math_sum', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local result = 0\n  for _, v in ipairs(t) do\n    result = result + v\n  end\n  return result\nend\n`);\n  }\n\n  switch (func) {\n    case 'SUM':\n      functionName = provideSum();\n      break;\n\n    case 'MIN':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_min', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = math.huge\n  for _, v in ipairs(t) do\n    if v < result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'AVERAGE':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_average', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  return ${provideSum()}(t) / #t\nend\n`);\n      break;\n\n    case 'MAX':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_('math_max', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = -math.huge\n  for _, v in ipairs(t) do\n    if v > result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'MEDIAN':\n      // This operation excludes non-numbers.\n      functionName = generator.provideFunction_('math_median', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  if #t == 0 then\n    return 0\n  end\n  local temp = {}\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      table.insert(temp, v)\n    end\n  end\n  table.sort(temp)\n  if #temp % 2 == 0 then\n    return (temp[#temp / 2] + temp[(#temp / 2) + 1]) / 2\n  else\n    return temp[math.ceil(#temp / 2)]\n  end\nend\n`);\n      break;\n\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // The generator version includes non-numbers.\n      functionName = generator.provideFunction_('math_modes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  local counts = {}\n  for _, v in ipairs(t) do\n    if counts[v] == nil then\n      counts[v] = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  local biggestCount = 0\n  for _, v  in pairs(counts) do\n    if v > biggestCount then\n      biggestCount = v\n    end\n  end\n  local temp = {}\n  for k, v in pairs(counts) do\n    if v == biggestCount then\n      table.insert(temp, k)\n    end\n  end\n  return temp\nend\n`);\n      break;\n\n    case 'STD_DEV':\n      functionName = generator.provideFunction_('math_standard_deviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local m\n  local vm\n  local total = 0\n  local count = 0\n  local result\n  m = #t == 0 and 0 or ${provideSum()}(t) / #t\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      vm = v - m\n      total = total + (vm * vm)\n      count = count + 1\n    end\n  end\n  result = math.sqrt(total / (count-1))\n  return result\nend\n`);\n      break;\n\n    case 'RANDOM':\n      functionName = generator.provideFunction_('math_random_list', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return nil\n  end\n  return t[math.random(#t)]\nend\n`);\n      break;\n\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [functionName + '(' + list + ')', Order.HIGH];\n};\n\nluaGenerator.forBlock['math_modulo'] = function(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\nluaGenerator.forBlock['math_constrain'] = function(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'LOW', Order.NONE) || '-math.huge';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'math.huge';\n  const code = 'math.min(math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['math_random_int'] = function(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'math.random(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['math_random_float'] = function(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['math.random()', Order.HIGH];\n};\n\nluaGenerator.forBlock['math_atan2'] = function(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))', Order.HIGH\n  ];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for procedure blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.procedures');\n\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['procedures_defreturn'] = function(block, generator) {\n  // Define a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(\n          generator.INFINITE_LOOP_TRAP, block), generator.INDENT);\n  }\n  let branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = '';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ')\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + 'end\\n';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nluaGenerator.forBlock['procedures_defnoreturn'] =\n    luaGenerator.forBlock['procedures_defreturn'];\n\nluaGenerator.forBlock['procedures_callreturn'] = function(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'nil';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['procedures_callnoreturn'] = function(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + '\\n';\n};\n\nluaGenerator.forBlock['procedures_ifreturn'] = function(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if ' + condition + ' then\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code +=\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'nil';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  code += 'end\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for text blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.texts');\n\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['text'] = function(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nluaGenerator.forBlock['text_multiline'] = function(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('..') !== -1 ? Order.CONCATENATION : Order.ATOMIC;\n  return [code, order];\n};\n\nluaGenerator.forBlock['text_join'] = function(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  if (block.itemCount_ === 0) {\n    return [\"''\", Order.ATOMIC];\n  } else if (block.itemCount_ === 1) {\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n    const code = 'tostring(' + element + ')';\n    return [code, Order.HIGH];\n  } else if (block.itemCount_ === 2) {\n    const element0 =\n        generator.valueToCode(block, 'ADD0', Order.CONCATENATION) || \"''\";\n    const element1 =\n        generator.valueToCode(block, 'ADD1', Order.CONCATENATION) || \"''\";\n    const code = element0 + ' .. ' + element1;\n    return [code, Order.CONCATENATION];\n  } else {\n    const elements = [];\n    for (let i = 0; i < block.itemCount_; i++) {\n      elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n    }\n    const code = 'table.concat({' + elements.join(', ') + '})';\n    return [code, Order.HIGH];\n  }\n};\n\nluaGenerator.forBlock['text_append'] = function(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value =\n      generator.valueToCode(block, 'TEXT', Order.CONCATENATION) || \"''\";\n  return varName + ' = ' + varName + ' .. ' + value + '\\n';\n};\n\nluaGenerator.forBlock['text_length'] = function(block, generator) {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text, Order.UNARY];\n};\n\nluaGenerator.forBlock['text_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text + ' == 0', Order.RELATIONAL];\n};\n\nluaGenerator.forBlock['text_indexOf'] = function(block, generator) {\n  // Search the text for a substring.\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('firstIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(str, substr, 1, true)\n  if i == nil then\n    return 0\n  end\n  return i\nend\n`);\n  } else {\n    functionName = generator.provideFunction_('lastIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\n  if i then\n    return #str + 2 - i - #substr\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_charAt'] = function(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const atOrder = (where === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at = generator.valueToCode(block, 'AT', atOrder) || '1';\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let code;\n  if (where === 'RANDOM') {\n    const functionName = generator.provideFunction_('text_random_letter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local index = math.random(string.len(str))\n  return string.sub(str, index, index)\nend\n`);\n    code = functionName + '(' + text + ')';\n  } else {\n    let start;\n    if (where === 'FIRST') {\n      start = '1';\n    } else if (where === 'LAST') {\n      start = '-1';\n    } else {\n      if (where === 'FROM_START') {\n        start = at;\n      } else if (where === 'FROM_END') {\n        start = '-' + at;\n      } else {\n        throw Error('Unhandled option (text_charAt).');\n      }\n    }\n    if (start.match(/^-?\\w*$/)) {\n      code = 'string.sub(' + text + ', ' + start + ', ' + start + ')';\n    } else {\n      // use function to avoid reevaluation\n      const functionName = generator.provideFunction_('text_char_at', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, index)\n  return string.sub(str, index, index)\nend\n`);\n      code = functionName + '(' + text + ', ' + start + ')';\n    }\n  }\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_getSubstring'] = function(block, generator) {\n  // Get substring.\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\n\n  // Get start index.\n  const where1 = block.getFieldValue('WHERE1');\n  const at1Order = (where1 === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at1 = generator.valueToCode(block, 'AT1', at1Order) || '1';\n  let start;\n  if (where1 === 'FIRST') {\n    start = 1;\n  } else if (where1 === 'FROM_START') {\n    start = at1;\n  } else if (where1 === 'FROM_END') {\n    start = '-' + at1;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  // Get end index.\n  const where2 = block.getFieldValue('WHERE2');\n  const at2Order = (where2 === 'FROM_END') ? Order.UNARY : Order.NONE;\n  const at2 = generator.valueToCode(block, 'AT2', at2Order) || '1';\n  let end;\n  if (where2 === 'LAST') {\n    end = -1;\n  } else if (where2 === 'FROM_START') {\n    end = at2;\n  } else if (where2 === 'FROM_END') {\n    end = '-' + at2;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = 'string.sub(' + text + ', ' + start + ', ' + end + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_changeCase'] = function(block, generator) {\n  // Change capitalization.\n  const operator = block.getFieldValue('CASE');\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  let functionName;\n  if (operator === 'UPPERCASE') {\n    functionName = 'string.upper';\n  } else if (operator === 'LOWERCASE') {\n    functionName = 'string.lower';\n  } else if (operator === 'TITLECASE') {\n    // There are shorter versions at\n    // http://lua-users.org/wiki/SciteTitleCase\n    // that do not preserve whitespace.\n    functionName = generator.provideFunction_('text_titlecase', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local buf = {}\n  local inWord = false\n  for i = 1, #str do\n    local c = string.sub(str, i, i)\n    if inWord then\n      table.insert(buf, string.lower(c))\n      if string.find(c, \"%s\") then\n        inWord = false\n      end\n    else\n      table.insert(buf, string.upper(c))\n      inWord = true\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  }\n  const code = functionName + '(' + text + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_trim'] = function(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {LEFT: '^%s*(,-)', RIGHT: '(.-)%s*$', BOTH: '^%s*(.-)%s*$'};\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.gsub(' + text + ', \"' + operator + '\", \"%1\")';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_print'] = function(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n};\n\nluaGenerator.forBlock['text_prompt_ext'] = function(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n\n  const functionName = generator.provideFunction_('text_prompt', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg)\n  io.write(msg)\n  io.flush()\n  return io.read()\nend\n`);\n  let code = functionName + '(' + msg + ')';\n\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'tonumber(' + code + ', 10)';\n  }\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_prompt'] = luaGenerator.forBlock['text_prompt_ext'];\n\nluaGenerator.forBlock['text_count'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('text_count', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle)\n  if #needle == 0 then\n    return #haystack + 1\n  end\n  local i = 1\n  local count = 0\n  while true do\n    i = string.find(haystack, needle, i, true)\n    if i == nil then\n      break\n    end\n    count = count + 1\n    i = i + #needle\n  end\n  return count\nend\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_replace'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_('text_replace', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement)\n  local buf = {}\n  local i = 1\n  while i <= #haystack do\n    if string.sub(haystack, i, i + #needle - 1) == needle then\n      for j = 1, #replacement do\n        table.insert(buf, string.sub(replacement, j, j))\n      end\n      i = i + #needle\n    else\n      table.insert(buf, string.sub(haystack, i, i))\n      i = i + 1\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.HIGH];\n};\n\nluaGenerator.forBlock['text_reverse'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.reverse(' + text + ')';\n  return [code, Order.HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.variables');\n\nimport {NameType} from '../../core/names.js';\nimport {luaGenerator, Order} from '../lua.js';\n\n\nluaGenerator.forBlock['variables_get'] = function(block, generator) {\n  // Variable getter.\n  const code =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Order.ATOMIC];\n};\n\nluaGenerator.forBlock['variables_set'] = function(block, generator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for dynamic variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.variablesDynamic');\n\nimport {luaGenerator} from '../lua.js';\nimport './variables.js';\n\n\n// Lua is dynamically typed.\nluaGenerator.forBlock['variables_get_dynamic'] =\n    luaGenerator.forBlock['variables_get'];\nluaGenerator.forBlock['variables_set_dynamic'] =\n    luaGenerator.forBlock['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Lua for\n *     blocks.  This is the entrypoint for lua_compressed.js.\n * @suppress {extraRequire}\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Lua.all');\n\nimport './colour.js';\nimport './lists.js';\nimport './logic.js';\nimport './loops.js';\nimport './math.js';\nimport './procedures.js';\nimport './text.js';\nimport './variables.js';\nimport './variables_dynamic.js';\n\nexport * from '../lua.js';\n"]}