{"version":3,"sources":["generators/dart.js","generators/dart/colour.js","generators/dart/lists.js","generators/dart/logic.js","generators/dart/loops.js","generators/dart/math.js","generators/dart/procedures.js","generators/dart/text.js","generators/dart/variables.js","generators/dart/variables_dynamic.js","generators/dart/all.js"],"names":["Order","ATOMIC","UNARY_POSTFIX","UNARY_PREFIX","MULTIPLICATIVE","ADDITIVE","SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","RELATIONAL","EQUALITY","LOGICAL_AND","LOGICAL_OR","IF_NULL","CONDITIONAL","CASCADE","ASSIGNMENT","NONE","DartGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","workspace","nameDB_","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","i","length","push","getName","NameType","DEVELOPER_VARIABLE","variables","allUsedVarModels","getId","VARIABLE","definitions_","join","finish","code","prefixLines","INDENT","imports","definitions","def","match","replace","scrubNakedValue","line","quote_","string","multiline_quote_","split","map","lines","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","getProcedureDef","inputList","type","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","ORDER_NONE","options","oneBasedIndex","defaultAtIndex","outerOrder","innerOrder","ORDER_ADDITIVE","ORDER_UNARY_PREFIX","at","valueToCode","isNumber","parseInt","Math","floor","dartGenerator","$jscomp$tmp$exports$module$name","forBlock","generator","getFieldValue","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","red","green","blue","c1","c2","ratio","elements","Array","itemCount_","element","operator","item","cacheList","listVar","getDistinctName","list","mode","where","listOrder","xVar","Error","value","where1","where2","at1","at2","direction","sortFunctionName","input","delimiter","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","getInput","OPERATORS","argument0","argument1","defaultArgument","value_if","value_then","value_else","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","until","variable0","increment","up","step","abs","startVar","incVar","xfix","loop","getSurroundLoop","suppressPrefixSuffix","Infinity","tuple","arg","substring","CONSTANTS","constant","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","varName","func","argument2","funcName","PROCEDURE","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","returnType","args","getVars","hasReturnValue_","indexOf","text","textOrder","requiresLengthCall","msg","sub","from","to"],"mappings":"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","file":"dart_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Dart for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\nimport * as goog from '../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart');\n\nimport * as Variables from '../core/variables.js';\nimport * as stringUtils from '../core/utils/string.js';\n// import type {Block} from '../core/block.js';\nimport {CodeGenerator} from '../core/generator.js';\nimport {Names, NameType} from '../core/names.js';\n// import type {Workspace} from '../core/workspace.js';\nimport {inputTypes} from '../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * https://dart.dev/guides/language/language-tour#operators\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,         // 0 \"\" ...\n  UNARY_POSTFIX: 1,  // expr++ expr-- () [] . ?.\n  UNARY_PREFIX: 2,   // -expr !expr ~expr ++expr --expr\n  MULTIPLICATIVE: 3, // * / % ~/\n  ADDITIVE: 4,       // + -\n  SHIFT: 5,          // << >>\n  BITWISE_AND: 6,    // &\n  BITWISE_XOR: 7,    // ^\n  BITWISE_OR: 8,     // |\n  RELATIONAL: 9,     // >= > <= < as is is!\n  EQUALITY: 10,      // == !=\n  LOGICAL_AND: 11,   // &&\n  LOGICAL_OR: 12,    // ||\n  IF_NULL: 13,       // ??\n  CONDITIONAL: 14,   // expr ? expr : expr\n  CASCADE: 15,       // ..\n  ASSIGNMENT: 16,    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\n  NONE: 99,          // (...)\n};\n\n/**\n * Dart code generator class.\n */\nexport class DartGenerator extends CodeGenerator {\n  constructor(name) {\n    super(name ?? 'Dart');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // https://www.dartlang.org/docs/spec/latest/dart-language-specification.pdf\n      // Section 16.1.1\n      'assert,break,case,catch,class,const,continue,default,do,else,enum,' +\n      'extends,false,final,finally,for,if,in,is,new,null,rethrow,return,' +\n      'super,switch,this,throw,true,try,var,void,while,with,' +\n      // https://api.dartlang.org/dart_core.html\n      'print,identityHashCode,identical,BidirectionalIterator,Comparable,' +\n      'double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,' +\n      'Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,' +\n      'Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,' +\n      'StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,' +\n      'ArgumentError,AssertionError,CastError,ConcurrentModificationError,' +\n      'CyclicInitializationError,Error,Exception,FallThroughError,' +\n      'FormatException,IntegerDivisionByZeroException,NoSuchMethodError,' +\n      'NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,' +\n      'StateError,TypeError,UnimplementedError,UnsupportedError'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init();\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(this.nameDB_.getName(devVarList[i],\n                                        NameType.DEVELOPER_VARIABLE));\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(this.nameDB_.getName(variables[i].getId(),\n                                        NameType.VARIABLE));\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] =\n          'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Indent every line.\n    if (code) {\n      code = this.prefixLines(code, this.INDENT);\n    }\n    code = 'main() {\\n' + code + '}';\n\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^import\\s/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Dart string, complete with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Dart string.\n   * @protected\n   */\n  quote_(string) {\n    // Can't use goog.string.quote since $ must also be escaped.\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/\\$/g, '\\\\$')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Dart string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Dart string.\n   * @protected\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(' + \\'\\\\n\\' + \\n');\n  }\n\n  /**\n   * Common tasks for generating Dart from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Dart code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} Dart code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        if (block.getProcedureDef) {\n          // Use documentation comment for function comments.\n          commentCode += this.prefixLines(comment + '\\n', '/// ');\n        } else {\n          commentCode += this.prefixLines(comment + '\\n', '// ');\n        }\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    /** @type {number} */\n    let outerOrder;\n    let innerOrder;\n    if (delta) {\n      outerOrder = this.ORDER_ADDITIVE;\n      innerOrder = this.ORDER_ADDITIVE;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_PREFIX;\n      innerOrder = this.ORDER_UNARY_PREFIX;\n    } else {\n      outerOrder = order;\n    }\n\n    /** @type {string|number} */\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  }\n}\n\n/**\n * Dart code generator.\n * @type {!DartGenerator}\n */\nexport const dartGenerator = new DartGenerator();\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for colour blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.colour');\n\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.addReservedWords('Math');\n\ndartGenerator.forBlock['colour_picker'] = function(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\ndartGenerator.forBlock['colour_random'] = function(block, generator) {\n  // Generate a random colour.\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_random', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  String hex = '0123456789abcdef';\n  var rnd = new Math.Random();\n  return '#\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}';\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['colour_rgb'] = function(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_rgb', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(num r, num g, num b) {\n  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();\n  String rs = rn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();\n  String gs = gn.toInt().toRadixString(16);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();\n  String bs = bn.toInt().toRadixString(16);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['colour_blend'] = function(block, generator) {\n  // Blend two colours together.\n  const c1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio =\n      generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n\n  generator.definitions_['import_dart_math'] =\n      \"import 'dart:math' as Math;\";\n  const functionName = generator.provideFunction_('colour_blend', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String c1, String c2, num ratio) {\n  ratio = Math.max(Math.min(ratio, 1), 0);\n  int r1 = int.parse('0x\\${c1.substring(1, 3)}');\n  int g1 = int.parse('0x\\${c1.substring(3, 5)}');\n  int b1 = int.parse('0x\\${c1.substring(5, 7)}');\n  int r2 = int.parse('0x\\${c2.substring(1, 3)}');\n  int g2 = int.parse('0x\\${c2.substring(3, 5)}');\n  int b2 = int.parse('0x\\${c2.substring(5, 7)}');\n  num rn = (r1 * (1 - ratio) + r2 * ratio).round();\n  String rs = rn.toInt().toRadixString(16);\n  num gn = (g1 * (1 - ratio) + g2 * ratio).round();\n  String gs = gn.toInt().toRadixString(16);\n  num bn = (b1 * (1 - ratio) + b2 * ratio).round();\n  String bs = bn.toInt().toRadixString(16);\n  rs = '0$rs';\n  rs = rs.substring(rs.length - 2);\n  gs = '0$gs';\n  gs = gs.substring(gs.length - 2);\n  bs = '0$bs';\n  bs = bs.substring(bs.length - 2);\n  return '#$rs$gs$bs';\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for list blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.lists');\n\nimport {NameType} from '../../core/names.js';\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.addReservedWords('Math');\n\ndartGenerator.forBlock['lists_create_empty'] = function(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\ndartGenerator.forBlock['lists_create_with'] = function(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\ndartGenerator.forBlock['lists_repeat'] = function(block, generator) {\n  // Create a list with one element repeated.\n  const element =\n      generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount =\n      generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = 'new List.filled(' + repeatCount + ', ' + element + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_length'] = function(block, generator) {\n  // String or array length.\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  return [list + '.length', Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  return [list + '.isEmpty', Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_indexOf'] = function(block, generator) {\n  // Find an item in the list.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_getIndex'] = function(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = (where === 'RANDOM' || where === 'FROM_END') ?\n      Order.NONE :\n      Order.UNARY_POSTFIX;\n  let list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  // If `list` would be evaluated more than once (which is the case for\n  // RANDOM REMOVE and FROM_END) and is non-trivial, make sure to access it\n  // only once.\n  if (((where === 'RANDOM' && mode === 'REMOVE') || where === 'FROM_END') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (where === 'RANDOM') {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // We can use multiple statements.\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n          '.length);\\n';\n      code += list + '.removeAt(' + xVar + ');\\n';\n      return code;\n    } else {  // where === 'FROM_END'\n      if (mode === 'REMOVE') {\n        // We can use multiple statements.\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n        let code = cacheList();\n        code += list + '.removeAt(' + list + '.length' +\n            ' - ' + at + ');\\n';\n        return code;\n\n      } else if (mode === 'GET') {\n        const at = generator.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        const functionName = generator.provideFunction_('lists_get_from_end', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\n  x = my_list.length - x;\n  return my_list[x];\n}\n`);\n        const code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Order.UNARY_POSTFIX];\n      } else if (mode === 'GET_REMOVE') {\n        const at = generator.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        const functionName =\n            generator.provideFunction_('lists_remove_from_end', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\n  x = my_list.length - x;\n  return my_list.removeAt(x);\n}\n`);\n        const code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Order.UNARY_POSTFIX];\n      }\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    switch (where) {\n      case 'FIRST':\n        if (mode === 'GET') {\n          const code = list + '.first';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeAt(0)';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeAt(0);\\n';\n        }\n        break;\n      case 'LAST':\n        if (mode === 'GET') {\n          const code = list + '.last';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeLast()';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeLast();\\n';\n        }\n        break;\n      case 'FROM_START': {\n        const at = generator.getAdjusted(block, 'AT');\n        if (mode === 'GET') {\n          const code = list + '[' + at + ']';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const code = list + '.removeAt(' + at + ')';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'REMOVE') {\n          return list + '.removeAt(' + at + ');\\n';\n        }\n        break;\n      }\n      case 'FROM_END': {\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n        if (mode === 'GET') {\n          const code = list + '[' + list + '.length - ' + at + ']';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\n          const code = list + '.removeAt(' + list + '.length - ' + at + ')';\n          if (mode === 'GET_REMOVE') {\n            return [code, Order.UNARY_POSTFIX];\n          } else if (mode === 'REMOVE') {\n            return code + ';\\n';\n          }\n        }\n        break;\n      }\n      case 'RANDOM':\n        generator.definitions_['import_dart_math'] =\n            'import \\'dart:math\\' as Math;';\n        if (mode === 'REMOVE') {\n          // We can use multiple statements.\n          const xVar =\n              generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n          let code = 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n              '.length);\\n';\n          code += list + '.removeAt(' + xVar + ');\\n';\n          return code;\n        } else if (mode === 'GET') {\n          const functionName =\n              generator.provideFunction_('lists_get_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\n  int x = new Math.Random().nextInt(my_list.length);\n  return my_list[x];\n}\n`);\n          const code = functionName + '(' + list + ')';\n          return [code, Order.UNARY_POSTFIX];\n        } else if (mode === 'GET_REMOVE') {\n          const functionName =\n              generator.provideFunction_('lists_remove_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\n  int x = new Math.Random().nextInt(my_list.length);\n  return my_list.removeAt(x);\n}\n`);\n          const code = functionName + '(' + list + ')';\n          return [code, Order.UNARY_POSTFIX];\n        }\n        break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\ndartGenerator.forBlock['lists_setIndex'] = function(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  let list =\n      generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.add(' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at =\n          generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + list + '.length - ' + at + ', ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n          '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\ndartGenerator.forBlock['lists_getSublist'] = function(block, generator) {\n  // Get sublist.\n  const list =\n      generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (list.match(/^\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a is a variable or doesn't require a call for length,\n    // don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        // There is no second index if LAST option is chosen.\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    if (where2 === 'LAST') {\n      code = list + '.sublist(' + at1 + ')';\n    } else {\n      code = list + '.sublist(' + at1 + ', ' + at2 + ')';\n    }\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName = generator.provideFunction_('lists_get_sublist', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String where1, num at1, String where2, num at2) {\n  int getAt(String where, num at) {\n    if (where == 'FROM_END') {\n      at = list.length - 1 - at;\n    } else if (where == 'FIRST') {\n      at = 0;\n    } else if (where == 'LAST') {\n      at = list.length - 1;\n    } else if (where != 'FROM_START') {\n      throw 'Unhandled option (lists_getSublist).';\n    }\n    return at;\n  }\n  at1 = getAt(where1, at1);\n  at2 = getAt(where2, at2) + 1;\n  return list.sublist(at1, at2);\n}\n`);\n    code = functionName + '(' + list + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_sort'] = function(block, generator) {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const sortFunctionName = generator.provideFunction_('lists_sort', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String type, int direction) {\n  var compareFuncs = {\n    'NUMERIC': (a, b) => (direction * a.compareTo(b)).toInt(),\n    'TEXT': (a, b) => direction * a.toString().compareTo(b.toString()),\n    'IGNORE_CASE':\n      (a, b) => direction *\n      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())\n  };\n  list = new List.from(list);\n  var compare = compareFuncs[type];\n  list.sort(compare);\n  return list;\n}\n`);\n  return [\n    sortFunctionName + '(' + list + ', ' +\n        '\"' + type + '\", ' + direction + ')',\n    Order.UNARY_POSTFIX\n  ];\n};\n\ndartGenerator.forBlock['lists_split'] = function(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.UNARY_POSTFIX);\n  const delimiter =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['lists_reverse'] = function(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  // XXX What should the operator precedence be for a `new`?\n  const code = 'new List.from(' + list + '.reversed)';\n  return [code, Order.UNARY_POSTFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for logic blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.logic');\n\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.forBlock['controls_if'] = function(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block), generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? 'else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block), generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\ndartGenerator.forBlock['controls_ifelse'] =\n    dartGenerator.forBlock['controls_if'];\n\ndartGenerator.forBlock['logic_compare'] = function(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ?\n      Order.EQUALITY :\n      Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\ndartGenerator.forBlock['logic_operation'] = function(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order =\n      (operator === '&&') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\ndartGenerator.forBlock['logic_negate'] = function(block, generator) {\n  // Negation.\n  const order = Order.UNARY_PREFIX;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\ndartGenerator.forBlock['logic_boolean'] = function(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\ndartGenerator.forBlock['logic_null'] = function(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\ndartGenerator.forBlock['logic_ternary'] = function(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for loop blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.loops');\n\nimport {dartGenerator, Order} from '../dart.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\n\n\ndartGenerator.forBlock['controls_repeat_ext'] = function(block, generator) {\n  let repeats;\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats =\n        generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (int ' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\ndartGenerator.forBlock['controls_repeat'] =\n    dartGenerator.forBlock['controls_repeat_ext'];\n\ndartGenerator.forBlock['controls_whileUntil'] = function(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.UNARY_PREFIX : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\ndartGenerator.forBlock['controls_for'] = function(block, generator) {\n  // For loop.\n  const variable0 =\n        generator.nameDB_.getName(\n          block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n        generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_start', NameType.VARIABLE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_end', NameType.VARIABLE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += 'num ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += '(' + increment + ').abs();\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\ndartGenerator.forBlock['controls_forEach'] = function(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  const code =\n      'for (var ' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\ndartGenerator.forBlock['controls_flow_statements'] = function(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for math blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.math');\n\nimport {NameType} from '../../core/names.js';\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.addReservedWords('Math');\n\ndartGenerator.forBlock['math_number'] = function(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  let order;\n  if (code === Infinity) {\n    code = 'double.infinity';\n    order = Order.UNARY_POSTFIX;\n  } else if (code === -Infinity) {\n    code = '-double.infinity';\n    order = Order.UNARY_PREFIX;\n  } else {\n    // -4.abs() returns -4 in generator due to strange order of operation choices.\n    // -4 is actually an operator and a number.  Reflect this in the order.\n    order = code < 0 ? Order.UNARY_PREFIX : Order.ATOMIC;\n  }\n  return [code, order];\n};\n\ndartGenerator.forBlock['math_arithmetic'] = function(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [null, Order.NONE],  // Handle power separately.\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in generator requires a special case since it has no operator.\n  if (!operator) {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.UNARY_POSTFIX];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\ndartGenerator.forBlock['math_single'] = function(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_PREFIX) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in generator.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_PREFIX];\n  }\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  if (operator === 'ABS' || operator.substring(0, 5) === 'ROUND') {\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_POSTFIX) || '0';\n  } else if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = arg + '.abs()';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = arg + '.round()';\n      break;\n    case 'ROUNDUP':\n      code = arg + '.ceil()';\n      break;\n    case 'ROUNDDOWN':\n      code = arg + '.floor()';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.UNARY_POSTFIX];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n};\n\ndartGenerator.forBlock['math_constant'] = function(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['Math.pi', Order.UNARY_POSTFIX],\n    'E': ['Math.e', Order.UNARY_POSTFIX],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['Math.sqrt2', Order.UNARY_POSTFIX],\n    'SQRT1_2': ['Math.sqrt1_2', Order.UNARY_POSTFIX],\n    'INFINITY': ['double.infinity', Order.ATOMIC],\n  };\n  const constant = block.getFieldValue('CONSTANT');\n  if (constant !== 'INFINITY') {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n  }\n  return CONSTANTS[constant];\n};\n\ndartGenerator.forBlock['math_number_property'] = function(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.UNARY_POSTFIX],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    const functionName = generator.provideFunction_('math_isPrime', `\nbool ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is null, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    if (divisor === '0') {\n      return ['false', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\ndartGenerator.forBlock['math_change'] = function(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (' + varName + ' is num ? ' + varName + ' : 0) + ' +\n      argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\ndartGenerator.forBlock['math_round'] = dartGenerator.forBlock['math_single'];\n// Trigonometry functions have a single operand.\ndartGenerator.forBlock['math_trig'] = dartGenerator.forBlock['math_single'];\n\ndartGenerator.forBlock['math_on_list'] = function(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM': {\n      const functionName = generator.provideFunction_('math_sum', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  num sumVal = 0;\n  myList.forEach((num entry) {sumVal += entry;});\n  return sumVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MIN': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_min', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  if (myList.isEmpty) return null;\n  num minVal = myList[0];\n  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});\n  return minVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MAX': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_max', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\n  if (myList.isEmpty) return null;\n  num maxVal = myList[0];\n  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});\n  return maxVal;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'AVERAGE': {\n      // This operation exclude null and values that are not int or float:\n      //   math_mean([null,null,\"aString\",1,9]) -> 5.0\n      const functionName = generator.provideFunction_('math_mean', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only.\n  List localList = new List.from(myList);\n  localList.removeWhere((a) => a is! num);\n  if (localList.isEmpty) return null;\n  num sumVal = 0;\n  localList.forEach((var entry) {sumVal += entry;});\n  return sumVal / localList.length;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      const functionName = generator.provideFunction_('math_median', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only, then sort, then return middle value\n  // or the average of two middle values if list has an even number of elements.\n  List localList = new List.from(myList);\n  localList.removeWhere((a) => a is! num);\n  if (localList.isEmpty) return null;\n  localList.sort((a, b) => (a - b));\n  int index = localList.length ~/ 2;\n  if (localList.length % 2 == 1) {\n    return localList[index];\n  } else {\n    return (localList[index - 1] + localList[index]) / 2;\n  }\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_('math_modes', `\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List values) {\n  List modes = [];\n  List counts = [];\n  int maxCount = 0;\n  for (int i = 0; i < values.length; i++) {\n    var value = values[i];\n    bool found = false;\n    int thisCount;\n    for (int j = 0; j < counts.length; j++) {\n      if (counts[j][0] == value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.add([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (int j = 0; j < counts.length; j++) {\n    if (counts[j][1] == maxCount) {\n        modes.add(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  // First filter list for numbers only.\n  List numbers = new List.from(myList);\n  numbers.removeWhere((a) => a is! num);\n  if (numbers.isEmpty) return null;\n  num n = numbers.length;\n  num sum = 0;\n  numbers.forEach((x) => sum += x);\n  num mean = sum / n;\n  num sumSquare = 0;\n  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));\n  return Math.sqrt(sumSquare / n);\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName = generator.provideFunction_('math_random_item', `\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\n  int x = new Math.Random().nextInt(myList.length);\n  return myList[x];\n}\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['math_modulo'] = function(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\ndartGenerator.forBlock['math_constrain'] = function(block, generator) {\n  // Constrain a number between two limits.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'double.infinity';\n  const code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['math_random_int'] = function(block, generator) {\n  // Random integer between [X] and [Y].\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_('math_random_int', `\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(num a, num b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    num c = a;\n    a = b;\n    b = c;\n  }\n  return new Math.Random().nextInt(b - a + 1) + a;\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['math_random_float'] = function(block, generator) {\n  // Random fraction between 0 and 1.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  return ['new Math.Random().nextDouble()', Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['math_atan2'] = function(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  generator.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.pi * 180',\n    Order.MULTIPLICATIVE\n  ];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for procedure blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.procedures');\n\nimport {NameType} from '../../core/names.js';\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.forBlock['procedures_defreturn'] = function(block, generator) {\n  // Define a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const returnType = returnValue ? 'dynamic' : 'void';\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = returnType + ' ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\ndartGenerator.forBlock['procedures_defnoreturn'] = dartGenerator.forBlock['procedures_defreturn'];\n\ndartGenerator.forBlock['procedures_callreturn'] = function(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'),NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  let code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['procedures_callnoreturn'] = function(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\ndartGenerator.forBlock['procedures_ifreturn'] = function(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block), generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for text blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.texts');\n\nimport {NameType} from '../../core/names.js';\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.addReservedWords('Html,Math');\n\ndartGenerator.forBlock['text'] = function(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\ndartGenerator.forBlock['text_multiline'] = function(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\n  return [code, order];\n};\n\ndartGenerator.forBlock['text_join'] = function(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n          generator.valueToCode(block, 'ADD0', Order.UNARY_POSTFIX) || \"''\";\n      const code = element + '.toString()';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    default: {\n      const elements = new Array(block.itemCount_);\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] =\n            generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + '].join()';\n      return [code, Order.UNARY_POSTFIX];\n    }\n  }\n};\n\ndartGenerator.forBlock['text_append'] = function(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = [' + varName + ', ' + value + '].join();\\n';\n};\n\ndartGenerator.forBlock['text_length'] = function(block, generator) {\n  // String or array length.\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  return [text + '.length', Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  return [text + '.isEmpty', Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_indexOf'] = function(block, generator) {\n  // Search the text for a substring.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const substring =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_charAt'] = function(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'FIRST' || where === 'FROM_START') ?\n      Order.UNARY_POSTFIX :\n      Order.NONE;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  let at;\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'FROM_START': {\n      at = generator.getAdjusted(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'LAST':\n      at = 1;\n      // Fall through.\n    case 'FROM_END': {\n      at = generator.getAdjusted(block, 'AT', 1);\n      const functionName = generator.provideFunction_('text_get_from_end', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, num x) {\n  return text[text.length - x];\n}\n`);\n      const code = functionName + '(' + text + ', ' + at + ')';\n      return [code, Order.UNARY_POSTFIX];\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      const functionName =\n          generator.provideFunction_('text_random_letter', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text) {\n  int x = new Math.Random().nextInt(text.length);\n  return text[x];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.UNARY_POSTFIX];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\ndartGenerator.forBlock['text_getSubstring'] = function(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const requiresLengthCall = (where1 !== 'FROM_END' && where2 === 'FROM_START');\n  const textOrder =\n      requiresLengthCall ? Order.UNARY_POSTFIX : Order.NONE;\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n\n    if (where2 === 'LAST') {\n      code = text + '.substring(' + at1 + ')';\n    } else {\n      code = text + '.substring(' + at1 + ', ' + at2 + ')';\n    }\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName =\n        generator.provideFunction_('text_get_substring', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, String where1, num at1, String where2, num at2) {\n  int getAt(String where, num at) {\n    if (where == 'FROM_END') {\n      at = text.length - 1 - at;\n    } else if (where == 'FIRST') {\n      at = 0;\n    } else if (where == 'LAST') {\n      at = text.length - 1;\n    } else if (where != 'FROM_START') {\n      throw 'Unhandled option (text_getSubstring).';\n    }\n    return at;\n  }\n  at1 = getAt(where1, at1);\n  at2 = getAt(where2, at2) + 1;\n  return text.substring(at1, at2);\n}\n`);\n    code = functionName + '(' + text + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_changeCase'] = function(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const textOrder = operator ? Order.UNARY_POSTFIX : Order.NONE;\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native generator function.  Define one.\n    const functionName = generator.provideFunction_('text_toTitleCase', `\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String str) {\n  RegExp exp = new RegExp(r'\\\\b');\n  List<String> list = str.split(exp);\n  final title = new StringBuffer();\n  for (String part in list) {\n    if (part.length > 0) {\n      title.write(part[0].toUpperCase());\n      if (part.length > 0) {\n        title.write(part.substring(1).toLowerCase());\n      }\n    }\n  }\n  return title.toString();\n}\n`);\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_trim'] = function(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.replaceFirst(new RegExp(r\\'^\\\\s+\\'), \\'\\')',\n    'RIGHT': '.replaceFirst(new RegExp(r\\'\\\\s+$\\'), \\'\\')',\n    'BOTH': '.trim()'\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  return [text + operator, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_print'] = function(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ');\\n';\n};\n\ndartGenerator.forBlock['text_prompt_ext'] = function(block, generator) {\n  // Prompt function.\n  generator.definitions_['import_dart_html'] =\n      'import \\'dart:html\\' as Html;';\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'Html.window.prompt(' + msg + ', \\'\\')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    generator.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    code = 'Math.parseDouble(' + code + ')';\n  }\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_prompt'] =\n    dartGenerator.forBlock['text_prompt_ext'];\n\ndartGenerator.forBlock['text_count'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  // Substring count is not a native generator function.  Define one.\n  const functionName = generator.provideFunction_('text_count', `\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(String haystack, String needle) {\n  if (needle.length == 0) {\n    return haystack.length + 1;\n  }\n  int index = 0;\n  int count = 0;\n  while (index != -1) {\n    index = haystack.indexOf(needle, index);\n    if (index != -1) {\n      count++;\n     index += needle.length;\n    }\n  }\n  return count;\n}\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_replace'] = function(block, generator) {\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replaceAll(' + from + ', ' + to + ')';\n  return [code, Order.UNARY_POSTFIX];\n};\n\ndartGenerator.forBlock['text_reverse'] = function(block, generator) {\n  // There isn't a sensible way to do this in generator. See:\n  // http://stackoverflow.com/a/21613700/3529104\n  // Implementing something is possibly better than not implementing anything?\n  const text =\n      generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\n  const code = 'new String.fromCharCodes(' + text + '.runes.toList().reversed)';\n  return [code, Order.UNARY_PREFIX];\n};\n","/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.variables');\n\nimport {NameType} from '../../core/names.js';\nimport {dartGenerator, Order} from '../dart.js';\n\n\ndartGenerator.forBlock['variables_get'] = function(block, generator) {\n  // Variable getter.\n  const code =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Order.ATOMIC];\n};\n\ndartGenerator.forBlock['variables_set'] = function(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for dynamic variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.variablesDynamic');\n\nimport {dartGenerator} from '../dart.js';\nimport './variables.js';\n\n\n// generator is dynamically typed.\ndartGenerator.forBlock['variables_get_dynamic'] =\n    dartGenerator.forBlock['variables_get'];\ndartGenerator.forBlock['variables_set_dynamic'] =\n    dartGenerator.forBlock['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Dart for\n *     blocks.  This is the entrypoint for dart_compressed.js.\n * @suppress {extraRequire}\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Dart.all');\n\nimport './colour.js';\nimport './lists.js';\nimport './logic.js';\nimport './loops.js';\nimport './math.js';\nimport './procedures.js';\nimport './text.js';\nimport './variables.js';\nimport './variables_dynamic.js';\n\nexport * from '../dart.js';\n"]}