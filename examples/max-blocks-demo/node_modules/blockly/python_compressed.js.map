{"version":3,"sources":["generators/python.js","generators/python/colour.js","generators/python/lists.js","generators/python/logic.js","generators/python/loops.js","generators/python/math.js","generators/python/procedures.js","generators/python/text.js","generators/python/variables.js","generators/python/variables_dynamic.js","generators/python/all.js"],"names":["Order","ATOMIC","COLLECTION","STRING_CONVERSION","MEMBER","FUNCTION_CALL","EXPONENTIATION","UNARY_SIGN","BITWISE_NOT","MULTIPLICATIVE","ADDITIVE","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","RELATIONAL","LOGICAL_NOT","LOGICAL_AND","LOGICAL_OR","CONDITIONAL","LAMBDA","NONE","PythonGenerator","CodeGenerator","constructor","name","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","workspace","PASS","INDENT","nameDB_","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","NameType","VARIABLE","definitions_","join","finish","code","imports","definitions","def","match","replace","scrubNakedValue","line","quote_","string","quote","indexOf","multiline_quote_","split","map","lines","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","inputList","type","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjustedInt","atId","opt_delta","opt_negate","delta","options","oneBasedIndex","defaultAtIndex","at","valueToCode","atOrder","ORDER_ADDITIVE","ORDER_NONE","isNumber","parseInt","pythonGenerator","$jscomp$tmp$exports$module$name","forBlock","generator","getFieldValue","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","g","b","colour1","colour2","ratio","elements","Array","itemCount_","item","times","list","errorIndex","firstIndexAdjustment","lastIndexAdjustment","mode","where","listOrder","Error","value","listVar","getDistinctName","xVar","where1","where2","at1","at2","String","reverse","sortFunctionName","value_input","value_delim","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","getInput","operator","OPERATORS","order","argument0","argument1","defaultArgument","value_if","value_then","value_else","repeats","getField","branch","addLoopTrap","loopVar","until","variable0","increment","defineUpRange","defineDownRange","generateUpDownRange","start","end","inc","Number","Math","abs","range","scrub","arg","suffix","varName","startVar","endVar","incVar","xfix","loop","getSurroundLoop","suppressPrefixSuffix","Infinity","tuple","CONSTANTS","constant","PROPERTIES","dropdownProperty","inputOrder","outputOrder","numberToCheck","divisor","func","argument2","globals","usedVariables","variable","getVars","DEVELOPER_VARIABLE","globalString","funcName","PROCEDURE","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","hasReturnValue_","strRegExp","forceString","test","element","codeAndOrder","element0","element1","tempVar","substring","text","textOrder","msg","sub","from","to"],"mappings":"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","file":"python_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Python for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\nimport * as goog from '../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python');\n\nimport * as stringUtils from '../core/utils/string.js';\nimport * as Variables from '../core/variables.js';\n// import type {Block} from '../core/block.js';\nimport {CodeGenerator} from '../core/generator.js';\nimport {Names, NameType} from '../core/names.js';\n// import type {Workspace} from '../core/workspace.js';\nimport {inputTypes} from '../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://docs.python.org/reference/expressions.html#summary\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,             // 0 \"\" ...\n  COLLECTION: 1,         // tuples, lists, dictionaries\n  STRING_CONVERSION: 1,  // `expression...`\n  MEMBER: 2.1,           // . []\n  FUNCTION_CALL: 2.2,    // ()\n  EXPONENTIATION: 3,     // **\n  UNARY_SIGN: 4,         // + -\n  BITWISE_NOT: 4,        // ~\n  MULTIPLICATIVE: 5,     // * / // %\n  ADDITIVE: 6,           // + -\n  BITWISE_SHIFT: 7,      // << >>\n  BITWISE_AND: 8,        // &\n  BITWISE_XOR: 9,        // ^\n  BITWISE_OR: 10,        // |\n  RELATIONAL: 11,        // in, not in, is, is not, >, >=, <>, !=, ==\n  LOGICAL_NOT: 12,       // not\n  LOGICAL_AND: 13,       // and\n  LOGICAL_OR: 14,        // or\n  CONDITIONAL: 15,       // if else\n  LAMBDA: 16,            // lambda\n  NONE: 99,              // (...)\n};\n\n/**\n * PythonScript code generator class.\n */\nexport class PythonGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n  \n    // not (not foo) -> not not foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a and (b and c) -> a and b and c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a or (b or c) -> a or b or c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n  \n  constructor(name) {\n    super(name ?? 'Python');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // import keyword\n      // print(','.join(sorted(keyword.kwlist)))\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\n      'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\n      'not,or,pass,print,raise,return,try,while,with,yield,' +\n      // https://docs.python.org/3/library/constants.html\n      // https://docs.python.org/2/library/constants.html\n      'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\n      // >>> print(','.join(sorted(dir(__builtins__))))\n      // https://docs.python.org/3/library/functions.html\n      // https://docs.python.org/2/library/functions.html\n      'ArithmeticError,AssertionError,AttributeError,BaseException,' +\n      'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\n      'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\n      'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\n      'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\n      'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\n      'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\n      'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\n      'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\n      'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\n      'OverflowError,PendingDeprecationWarning,PermissionError,' +\n      'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\n      'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\n      'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\n      'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\n      'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\n      'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\n      '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\n      'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\n      'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\n      'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\n      'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\n      'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\n      'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\n      'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\n      'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\n      'vars,xrange,zip'\n    );\n  }\n  \n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   * @this {CodeGenerator}\n   */\n  init(workspace) {\n    super.init(workspace);\n  \n    /**\n     * Empty loops or conditionals are not allowed in Python.\n     */\n    this.PASS = this.INDENT + 'pass\\n';\n  \n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n  \n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n  \n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\n          ' = None');\n    }\n  \n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n          this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE) +\n          ' = None');\n    }\n  \n    this.definitions_['variables'] = defvars.join('\\n');\n    this.isInitialized = true;\n  }\n  \n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n  \n    this.nameDB_.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n  \n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + '\\n';\n  }\n  \n  /**\n   * Encode a string as a properly escaped Python string, complete with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Python string.\n   * @protected\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\n  \n    // Follow the CPython behaviour of repr() for a non-byte string.\n    let quote = '\\'';\n    if (string.indexOf('\\'') !== -1) {\n      if (string.indexOf('\"') === -1) {\n        quote = '\"';\n      } else {\n        string = string.replace(/'/g, '\\\\\\'');\n      }\n    }\n    return quote + string + quote;\n  }\n  \n  /**\n   * Encode a string as a properly escaped multiline Python string, complete\n   * with quotes.\n   * @param {string} string Text to encode.\n   * @return {string} Python string.\n   * @protected\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(' + \\'\\\\n\\' + \\n');\n  }\n  \n  /**\n   * Common tasks for generating Python from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The Python code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n   * @return {string} Python code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '# ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '# ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n  \n  /**\n   * Gets a property and adjusts the value, taking into account indexing.\n   * If a static int, casts to an integer, otherwise returns a code string.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @return {string|number}\n   */\n  getAdjustedInt(block, atId, opt_delta, opt_negate) {\n    let delta = opt_delta || 0;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    const atOrder = delta ? this.ORDER_ADDITIVE : this.ORDER_NONE;\n    let at = this.valueToCode(block, atId, atOrder) || defaultAtIndex;\n  \n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = 'int(' + at + ' + ' + delta + ')';\n      } else if (delta < 0) {\n        at = 'int(' + at + ' - ' + -delta + ')';\n      } else {\n        at = 'int(' + at + ')';\n      }\n      if (opt_negate) {\n        at = '-' + at;\n      }\n    }\n    return at;\n  }\n}\n\n/**\n * Python code generator.\n * @type {!PythonGenerator}\n */\nexport const pythonGenerator = new PythonGenerator();\n  \n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for colour blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.colour');\n\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['colour_picker'] = function(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\npythonGenerator.forBlock['colour_random'] = function(block, generator) {\n  // Generate a random colour.\n  generator.definitions_['import_random'] = 'import random';\n  const code = '\\'#%06x\\' % random.randint(0, 2**24 - 1)';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['colour_rgb'] = function(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_('colour_rgb', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\n  r = round(min(100, max(0, r)) * 2.55)\n  g = round(min(100, max(0, g)) * 2.55)\n  b = round(min(100, max(0, b)) * 2.55)\n  return '#%02x%02x%02x' % (r, g, b)\n`);\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['colour_blend'] = function(block, generator) {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_('colour_blend', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\n  ratio = min(1, max(0, ratio))\n  r = round(r1 * (1 - ratio) + r2 * ratio)\n  g = round(g1 * (1 - ratio) + g2 * ratio)\n  b = round(b1 * (1 - ratio) + b2 * ratio)\n  return '#%02x%02x%02x' % (r, g, b)\n`);\n  const colour1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE)\n      || '\\'#000000\\'';\n  const colour2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE)\n      || '\\'#000000\\'';\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\n  const code =\n      functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for list blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.lists');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['lists_create_empty'] = function(block, generator) {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n};\n\npythonGenerator.forBlock['lists_create_with'] = function(block, generator) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] =\n        generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n};\n\npythonGenerator.forBlock['lists_repeat'] = function(block, generator) {\n  // Create a list with one element repeated.\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const times =\n      generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  const code = '[' + item + '] * ' + times;\n  return [code, Order.MULTIPLICATIVE];\n};\n\npythonGenerator.forBlock['lists_length'] = function(block, generator) {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['lists_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  const code = 'not len(' + list + ')';\n  return [code, Order.LOGICAL_NOT];\n};\n\npythonGenerator.forBlock['lists_indexOf'] = function(block, generator) {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let firstIndexAdjustment = '';\n  let lastIndexAdjustment = ' - 1';\n\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    firstIndexAdjustment = ' + 1';\n    lastIndexAdjustment = '';\n  }\n\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_('first_index', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = my_list.index(elem)${firstIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`);\n  } else {\n    functionName = generator.provideFunction_('last_index', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`);\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['lists_getIndex'] = function(block, generator) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(0)';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(0)\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '[-1]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop()\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      generator.definitions_['import_random'] = 'import random';\n      if (mode === 'GET') {\n        const code = 'random.choice(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else {\n        const functionName =\n            generator.provideFunction_('lists_remove_random_item', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  x = int(random.random() * len(myList))\n  return myList.pop(x)\n`);\n        const code = functionName + '(' + list + ')';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + '\\n';\n        }\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\npythonGenerator.forBlock['lists_setIndex'] = function(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        return list + '[-1] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.append(' + value + ')\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_random'] = 'import random';\n      let code = cacheList();\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + '\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\npythonGenerator.forBlock['lists_getSublist'] = function(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        generator.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n};\n\npythonGenerator.forBlock['lists_sort'] = function(block, generator) {\n  // Block for sorting a list.\n  const list = (generator.valueToCode(block, 'LIST', Order.NONE) || '[]');\n  const type = block.getFieldValue('TYPE');\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\n  const sortFunctionName = generator.provideFunction_('lists_sort', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\n  def try_float(s):\n    try:\n      return float(s)\n    except:\n      return 0\n  key_funcs = {\n    \"NUMERIC\": try_float,\n    \"TEXT\": str,\n    \"IGNORE_CASE\": lambda s: str(s).lower()\n  }\n  key_func = key_funcs[type]\n  list_cpy = list(my_list)\n  return sorted(list_cpy, key=key_func, reverse=reverse)\n`);\n\n  const code =\n      sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['lists_split'] = function(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  const mode = block.getFieldValue('MODE');\n  let code;\n  if (mode === 'SPLIT') {\n    const value_input =\n        generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\n    code = value_input + '.split(' + value_delim + ')';\n  } else if (mode === 'JOIN') {\n    const value_input =\n        generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\n    const value_delim =\n        generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\n    code = value_delim + '.join(' + value_input + ')';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['lists_reverse'] = function(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'list(reversed(' + list + '))';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for logic blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.logic');\n\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['controls_if'] = function(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\n    branchCode =\n        generator.statementToCode(block, 'DO' + n) ||\n        generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode =\n        generator.statementToCode(block, 'ELSE') || generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(\n              generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n};\n\npythonGenerator.forBlock['controls_ifelse'] =\n    pythonGenerator.forBlock['controls_if'];\n\npythonGenerator.forBlock['logic_compare'] = function(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\npythonGenerator.forBlock['logic_operation'] = function(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? 'and' : 'or';\n  const order =\n      (operator === 'and') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'False';\n    argument1 = 'False';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === 'and') ? 'True' : 'False';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\npythonGenerator.forBlock['logic_negate'] = function(block, generator) {\n  // Negation.\n  const argument0 =\n      generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\n  const code = 'not ' + argument0;\n  return [code, Order.LOGICAL_NOT];\n};\n\npythonGenerator.forBlock['logic_boolean'] = function(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'True' : 'False';\n  return [code, Order.ATOMIC];\n};\n\npythonGenerator.forBlock['logic_null'] = function(block, generator) {\n  // Null data type.\n  return ['None', Order.ATOMIC];\n};\n\npythonGenerator.forBlock['logic_ternary'] = function(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for loop blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.loops');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['controls_repeat_ext'] = function(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const loopVar =\n      generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\npythonGenerator.forBlock['controls_repeat'] =\n    pythonGenerator.forBlock['controls_repeat_ext'];\n\npythonGenerator.forBlock['controls_whileUntil'] = function(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 = generator.valueToCode(\n                      block, 'BOOL',\n                      until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'False';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ':\\n' + branch;\n};\n\npythonGenerator.forBlock['controls_for'] = function(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  let argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  let argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  let increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n\n  let code = '';\n  let range;\n\n  // Helper functions.\n  const defineUpRange = function() {\n    return generator.provideFunction_('upRange', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start <= stop:\n    yield start\n    start += abs(step)\n`);\n  };\n  const defineDownRange = function() {\n    return generator.provideFunction_('downRange', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start >= stop:\n    yield start\n    start -= abs(step)\n`);\n  };\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\n  const generateUpDownRange = function(start, end, inc) {\n    return '(' + start + ' <= ' + end + ') and ' + defineUpRange() + '(' +\n        start + ', ' + end + ', ' + inc + ') or ' + defineDownRange() + '(' +\n        start + ', ' + end + ', ' + inc + ')';\n  };\n\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All parameters are simple numbers.\n    argument0 = Number(argument0);\n    argument1 = Number(argument1);\n    increment = Math.abs(Number(increment));\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\n      // All parameters are integers.\n      if (argument0 <= argument1) {\n        // Count up.\n        argument1++;\n        if (argument0 === 0 && increment === 1) {\n          // If starting index is 0, omit it.\n          range = argument1;\n        } else {\n          range = argument0 + ', ' + argument1;\n        }\n        // If increment isn't 1, it must be explicit.\n        if (increment !== 1) {\n          range += ', ' + increment;\n        }\n      } else {\n        // Count down.\n        argument1--;\n        range = argument0 + ', ' + argument1 + ', -' + increment;\n      }\n      range = 'range(' + range + ')';\n    } else {\n      // At least one of the parameters is not an integer.\n      if (argument0 < argument1) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\n    }\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    const scrub = function(arg, suffix) {\n      if (stringUtils.isNumber(arg)) {\n        // Simple number.\n        arg = Number(arg);\n      } else if (!arg.match(/^\\w+$/)) {\n        // Not a variable, it's complicated.\n        const varName = generator.nameDB_.getDistinctName(\n            variable0 + suffix, NameType.VARIABLE);\n        code += varName + ' = ' + arg + '\\n';\n        arg = varName;\n      }\n      return arg;\n    };\n    const startVar = scrub(argument0, '_start');\n    const endVar = scrub(argument1, '_end');\n    const incVar = scrub(increment, '_inc');\n\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\n      if (startVar < endVar) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\n    } else {\n      // We cannot determine direction statically.\n      range = generateUpDownRange(startVar, endVar, incVar);\n    }\n  }\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\n  return code;\n};\n\npythonGenerator.forBlock['controls_forEach'] = function(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n};\n\npythonGenerator.forBlock['controls_flow_statements'] = function(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + 'continue\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for math blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.math');\n\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\n// If any new block imports any library, add that library name here.\npythonGenerator.addReservedWords('math,random,Number');\n\npythonGenerator.forBlock['math_number'] = function(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  let order;\n  if (code === Infinity) {\n    code = 'float(\"inf\")';\n    order = Order.FUNCTION_CALL;\n  } else if (code === -Infinity) {\n    code = '-float(\"inf\")';\n    order = Order.UNARY_SIGN;\n  } else {\n    order = code < 0 ? Order.UNARY_SIGN : Order.ATOMIC;\n  }\n  return [code, order];\n};\n\npythonGenerator.forBlock['math_arithmetic'] = function(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ** ', Order.EXPONENTIATION],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n  // In case of 'DIVIDE', division between integers returns different results\n  // in generator 2 and 3. However, is not an issue since Blockly does not\n  // guarantee identical results in all languages.  To do otherwise would\n  // require every operator to be wrapped in a function call.  This would kill\n  // legibility of the generated code.\n};\n\npythonGenerator.forBlock['math_single'] = function(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\n    return ['-' + code, Order.UNARY_SIGN];\n  }\n  generator.definitions_['import_math'] = 'import math';\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg =\n        generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'math.fabs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log10(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'COS':\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'TAN':\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ASIN':\n      code = 'math.asin(' + arg + ') / math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'math.acos(' + arg + ') / math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'math.atan(' + arg + ') / math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n};\n\npythonGenerator.forBlock['math_constant'] = function(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['math.pi', Order.MEMBER],\n    'E': ['math.e', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\n    'INFINITY': ['float(\\'inf\\')', Order.ATOMIC],\n  };\n  const constant = block.getFieldValue('CONSTANT');\n  if (constant !== 'INFINITY') {\n    generator.definitions_['import_math'] = 'import math';\n  }\n  return CONSTANTS[constant];\n};\n\npythonGenerator.forBlock['math_number_property'] = function(block, generator) {\n   // Check if a number is even, odd, prime, whole, positive, or negative\n   // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE,\n        Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE,\n        Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  }\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    generator.definitions_['import_math'] = 'import math';\n    generator.definitions_['from_numbers_import_Number'] =\n        'from numbers import Number';\n    const functionName = generator.provideFunction_('math_isPrime', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  # If n is not a number but a string, try parsing it.\n  if not isinstance(n, Number):\n    try:\n      n = float(n)\n    except:\n      return False\n  if n == 2 or n == 3:\n    return True\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\n    return False\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\n      return False\n  return True\n`);\n       code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\n    if (divisor === '0') {\n      return ['False', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  };\n  return [code, outputOrder];\n};\n\npythonGenerator.forBlock['math_change'] = function(block, generator) {\n  // Add to a variable in place.\n  generator.definitions_['from_numbers_import_Number'] =\n      'from numbers import Number';\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = (' + varName + ' if isinstance(' + varName +\n      ', Number) else 0) + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\npythonGenerator.forBlock['math_round'] =\n    pythonGenerator.forBlock['math_single'];\n// Trigonometry functions have a single operand.\npythonGenerator.forBlock['math_trig'] =\n    pythonGenerator.forBlock['math_single'];\n\npythonGenerator.forBlock['math_on_list'] = function(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM':\n      code = 'sum(' + list + ')';\n      break;\n    case 'MIN':\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      generator.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      // This operation excludes null and values that aren't int or float:\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\n      const functionName = generator.provideFunction_('math_mean', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = [e for e in myList if isinstance(e, Number)]\n  if not localList: return\n  return float(sum(localList)) / len(localList)\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      generator.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      // This operation excludes null values:\n      // math_median([null, null, 1, 3]) -> 2.0\n      const functionName = generator.provideFunction_( 'math_median', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = sorted([e for e in myList if isinstance(e, Number)])\n  if not localList: return\n  if len(localList) % 2 == 0:\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\n  else:\n    return localList[(len(localList) - 1) // 2]\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_('math_modes', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\n  modes = []\n  # Using a lists of [item, count] to keep count rather than dict\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\n  counts = []\n  maxCount = 1\n  for item in some_list:\n    found = False\n    for count in counts:\n      if count[0] == item:\n        count[1] += 1\n        maxCount = max(maxCount, count[1])\n        found = True\n    if not found:\n      counts.append([item, 1])\n  for counted_item, item_count in counts:\n    if item_count == maxCount:\n      modes.append(counted_item)\n  return modes\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      generator.definitions_['import_math'] = 'import math';\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\n  n = len(numbers)\n  if n == 0: return\n  mean = float(sum(numbers)) / n\n  variance = sum((x - mean) ** 2 for x in numbers) / n\n  return math.sqrt(variance)\n`);\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM':\n      generator.definitions_['import_random'] = 'import random';\n      code = 'random.choice(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['math_modulo'] = function(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) ||\n      '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) ||\n      '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n};\n\npythonGenerator.forBlock['math_constrain'] = function(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) ||\n      'float(\\'inf\\')';\n  const code =\n      'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['math_random_int'] = function(block, generator) {\n  // Random integer between [X] and [Y].\n  generator.definitions_['import_random'] = 'import random';\n  const argument0 =\n      generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['math_random_float'] = function(block, generator) {\n  // Random fraction between 0 and 1.\n  generator.definitions_['import_random'] = 'import random';\n  return ['random.random()', Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['math_atan2'] = function(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  generator.definitions_['import_math'] = 'import math';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\n    Order.MULTIPLICATIVE\n  ];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for procedure blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.procedures');\n\nimport * as Variables from '../../core/variables.js';\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['procedures_defreturn'] = function(block, generator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (let i = 0, variable; (variable = usedVariables[i]); i++) {\n    const varName = variable.name;\n    if (block.getVars().indexOf(varName) === -1) {\n      globals.push(generator.nameDB_.getName(varName, NameType.VARIABLE));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n        generator.nameDB_.getName(\n          devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n\n  const globalString = globals.length ?\n      generator.INDENT + 'global ' + globals.join(', ') + '\\n' :\n      '';\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  let branch = generator.statementToCode(block, 'STACK');\n  let returnValue =\n      generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = generator.PASS;\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' + globalString +\n      xfix1 + loopTrap + branch + xfix2 + returnValue;\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\npythonGenerator.forBlock['procedures_defnoreturn'] =\n    pythonGenerator.forBlock['procedures_defreturn'];\n\npythonGenerator.forBlock['procedures_callreturn'] = function(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] =\n        generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['procedures_callnoreturn'] = function(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + '\\n';\n};\n\npythonGenerator.forBlock['procedures_ifreturn'] = function(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\n  let code = 'if ' + condition + ':\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n        generator.injectId(\n          generator.STATEMENT_SUFFIX, block), generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value =\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  return code;\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for text blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.texts');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['text'] = function(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\npythonGenerator.forBlock['text_multiline'] = function(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\n  return [code, order];\n};\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'str(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {Array<string|number>} Array containing code evaluating to a string\n *     and\n *    the order of the returned code.[string, number]\n */\nconst forceString = function(value) {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_join'] = function(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  // Should we allow joining by '-' or ',' or any other characters?\n  switch (block.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n          generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 =\n          generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const element1 =\n          generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITIVE];\n    }\n    default: {\n      const elements = [];\n      for (let i = 0; i < block.itemCount_; i++) {\n        elements[i] =\n            generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const tempVar =\n          generator.nameDB_.getDistinctName('x', NameType.VARIABLE);\n      const code = '\\'\\'.join([str(' + tempVar + ') for ' + tempVar + ' in [' +\n          elements.join(', ') + ']])';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n};\n\npythonGenerator.forBlock['text_append'] = function(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\n};\n\npythonGenerator.forBlock['text_length'] = function(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  const code = 'not len(' + text + ')';\n  return [code, Order.LOGICAL_NOT];\n};\n\npythonGenerator.forBlock['text_indexOf'] = function(block, generator) {\n  // Search the text for a substring.\n  // Should we allow for non-case sensitive???\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\n  const substring =\n      generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_charAt'] = function(block, generator) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder =\n      (where === 'RANDOM') ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.MEMBER];\n    }\n    case 'LAST': {\n      const code = text + '[-1]';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'RANDOM': {\n      generator.definitions_['import_random'] = 'import random';\n      const functionName =\n          generator.provideFunction_('text_random_letter', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\n  x = int(random.random() * len(text))\n  return text[x]\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\npythonGenerator.forBlock['text_getSubstring'] = function(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text =\n      generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        generator.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n};\n\npythonGenerator.forBlock['text_changeCase'] = function(block, generator) {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.upper()',\n    'LOWERCASE': '.lower()',\n    'TITLECASE': '.title()'\n  };\n  const operator = OPERATORS[block.getFieldValue('CASE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_trim'] = function(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.lstrip()',\n    'RIGHT': '.rstrip()',\n    'BOTH': '.strip()'\n  };\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_print'] = function(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n};\n\npythonGenerator.forBlock['text_prompt_ext'] = function(block, generator) {\n  // Prompt function.\n  const functionName = generator.provideFunction_('text_prompt', `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\n  try:\n    return raw_input(msg)\n  except NameError:\n    return input(msg)\n`);\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = functionName + '(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'float(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_prompt'] =\n    pythonGenerator.forBlock['text_prompt_ext'];\n\npythonGenerator.forBlock['text_count'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = text + '.count(' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\npythonGenerator.forBlock['text_replace'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replace(' + from + ', ' + to + ')';\n  return [code, Order.MEMBER];\n};\n\npythonGenerator.forBlock['text_reverse'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + '[::-1]';\n  return [code, Order.MEMBER];\n};\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.variables');\n\nimport {NameType} from '../../core/names.js';\nimport {pythonGenerator, Order} from '../python.js';\n\n\npythonGenerator.forBlock['variables_get'] = function(block, generator) {\n  // Variable getter.\n  const code =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Order.ATOMIC];\n};\n\npythonGenerator.forBlock['variables_set'] = function(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for dynamic variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.variablesDynamic');\n\nimport {pythonGenerator} from '../python.js';\nimport './variables.js';\n\n\n// generator is dynamically typed.\npythonGenerator.forBlock['variables_get_dynamic'] = pythonGenerator.forBlock['variables_get'];\npythonGenerator.forBlock['variables_set_dynamic'] = pythonGenerator.forBlock['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Python for\n *     blocks.  This is the entrypoint for python_compressed.js.\n * @suppress {extraRequire}\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.Python.all');\n\nimport './colour.js';\nimport './lists.js';\nimport './logic.js';\nimport './loops.js';\nimport './math.js';\nimport './procedures.js';\nimport './text.js';\nimport './variables.js';\nimport './variables_dynamic.js';\n\nexport * from '../python.js';\n"]}