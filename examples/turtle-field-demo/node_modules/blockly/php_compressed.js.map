{"version":3,"sources":["generators/php.js","generators/php/colour.js","generators/php/lists.js","generators/php/logic.js","generators/php/loops.js","generators/php/math.js","generators/php/procedures.js","generators/php/text.js","generators/php/variables.js","generators/php/variables_dynamic.js","generators/php/all.js"],"names":["Order","ATOMIC","CLONE","NEW","MEMBER","FUNCTION_CALL","POWER","INCREMENT","DECREMENT","BITWISE_NOT","CAST","SUPPRESS_ERROR","INSTANCEOF","LOGICAL_NOT","UNARY_PLUS","UNARY_NEGATION","MULTIPLICATION","DIVISION","MODULUS","ADDITION","SUBTRACTION","STRING_CONCAT","BITWISE_SHIFT","RELATIONAL","EQUALITY","REFERENCE","BITWISE_AND","BITWISE_XOR","BITWISE_OR","LOGICAL_AND","LOGICAL_OR","IF_NULL","CONDITIONAL","ASSIGNMENT","LOGICAL_AND_WEAK","LOGICAL_XOR","LOGICAL_OR_WEAK","NONE","PhpGenerator","CodeGenerator","constructor","name","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","workspace","nameDB_","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","code","definitions","Object","values","definitions_","join","scrubNakedValue","line","quote_","string","replace","multiline_quote_","split","map","lines","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","i","inputList","length","type","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","ORDER_NONE","options","oneBasedIndex","defaultAtIndex","outerOrder","innerOrder","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_UNARY_NEGATION","at","valueToCode","isNumber","Number","Math","floor","phpGenerator","$jscomp$tmp$exports$module$name","forBlock","generator","getFieldValue","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","red","green","blue","c1","c2","ratio","Array","itemCount_","element","repeatCount","list","argument0","argument1","errorIndex","indexAdjustment","mode","Error","where","value","cachedList","match","listVar","getDistinctName","NameType","VARIABLE","xVar","where1","where2","at1","at2","String","listCode","direction","value_input","value_delim","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","INDENT","getInput","operator","OPERATORS","defaultArgument","value_if","value_then","value_else","repeats","getField","branch","addLoopTrap","loopVar","endVar","until","variable0","getName","increment","up","step","abs","startVar","incVar","xfix","loop","getSurroundLoop","suppressPrefixSuffix","Infinity","tuple","arg","CONSTANTS","PROPERTIES","dropdownProperty","prefix","suffix","inputOrder","outputOrder","numberToCheck","divisor","varName","func","argument2","globals","usedVariables","allUsedVarModels","variable","getVars","indexOf","push","devVarList","allDeveloperVariables","DEVELOPER_VARIABLE","globalStr","funcName","PROCEDURE","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","hasReturnValue_","element0","element1","elements","text","substring","msg","sub","from","to"],"mappings":"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","file":"php_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating PHP for blocks.\n * @suppress {checkTypes|globalThis}\n */\n\nimport * as goog from '../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP');\n\nimport * as stringUtils from '../core/utils/string.js';\n// import type {Block} from '../core/block.js';\nimport {CodeGenerator} from '../core/generator.js';\nimport {Names} from '../core/names.js';\n// import type {Workspace} from '../core/workspace.js';\nimport {inputTypes} from '../core/inputs/input_types.js';\n\n\n/**\n * Order of operation ENUMs.\n * http://php.net/manual/en/language.operators.precedence.php\n * @enum {number}\n */\nexport const Order = {\n  ATOMIC: 0,             // 0 \"\" ...\n  CLONE: 1,              // clone\n  NEW: 1,                // new\n  MEMBER: 2.1,           // []\n  FUNCTION_CALL: 2.2,    // ()\n  POWER: 3,              // **\n  INCREMENT: 4,          // ++\n  DECREMENT: 4,          // --\n  BITWISE_NOT: 4,        // ~\n  CAST: 4,               // (int) (float) (string) (array) ...\n  SUPPRESS_ERROR: 4,     // @\n  INSTANCEOF: 5,         // instanceof\n  LOGICAL_NOT: 6,        // !\n  UNARY_PLUS: 7.1,       // +\n  UNARY_NEGATION: 7.2,   // -\n  MULTIPLICATION: 8.1,   // *\n  DIVISION: 8.2,         // /\n  MODULUS: 8.3,          // %\n  ADDITION: 9.1,         // +\n  SUBTRACTION: 9.2,      // -\n  STRING_CONCAT: 9.3,    // .\n  BITWISE_SHIFT: 10,     // << >>\n  RELATIONAL: 11,        // < <= > >=\n  EQUALITY: 12,          // == != === !== <> <=>\n  REFERENCE: 13,         // &\n  BITWISE_AND: 13,       // &\n  BITWISE_XOR: 14,       // ^\n  BITWISE_OR: 15,        // |\n  LOGICAL_AND: 16,       // &&\n  LOGICAL_OR: 17,        // ||\n  IF_NULL: 18,           // ??\n  CONDITIONAL: 19,       // ?:\n  ASSIGNMENT: 20,        // = += -= *= /= %= <<= >>= ...\n  LOGICAL_AND_WEAK: 21,  // and\n  LOGICAL_XOR: 22,       // xor\n  LOGICAL_OR_WEAK: 23,   // or\n  NONE: 99,              // (...)\n};\n\nclass PhpGenerator extends CodeGenerator {\n  /**\n   * List of outer-inner pairings that do NOT require parentheses.\n   * @type {!Array<!Array<number>>}\n   */\n  ORDER_OVERRIDES = [\n    // (foo()).bar() -> foo().bar()\n    // (foo())[0] -> foo()[0]\n    [Order.MEMBER, Order.FUNCTION_CALL],\n    // (foo[0])[1] -> foo[0][1]\n    // (foo.bar).baz -> foo.bar.baz\n    [Order.MEMBER, Order.MEMBER],\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR]\n  ];\n\n  constructor(name) {\n    super(name ?? 'PHP');\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      this['ORDER_' + key] = Order[key];\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // http://php.net/manual/en/reserved.keywords.php\n      '__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,' +\n      'clone,const,continue,declare,default,die,do,echo,else,elseif,empty,' +\n      'enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,' +\n      'extends,final,for,foreach,function,global,goto,if,implements,include,' +\n      'include_once,instanceof,insteadof,interface,isset,list,namespace,new,' +\n      'or,print,private,protected,public,require,require_once,return,static,' +\n      'switch,throw,trait,try,unset,use,var,while,xor,' +\n      // http://php.net/manual/en/reserved.constants.php\n      'PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,' +\n      'PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,' +\n      'PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,' +\n      'PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,' +\n      'PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,' +\n      'PHP_SYSCONFDIR,PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,' +\n      'PHP_CONFIG_FILE_SCAN_DIR,PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,' +\n      'E_NOTICE,E_CORE_ERROR,E_CORE_WARNING,E_COMPILE_ERROR,' +\n      'E_COMPILE_WARNING,E_USER_ERROR,E_USER_WARNING,E_USER_NOTICE,' +\n      'E_DEPRECATED,E_USER_DEPRECATED,E_ALL,E_STRICT,' +\n      '__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,__FILE__,' +\n      '__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__'\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   * @param {!Workspace} workspace Workspace to generate code from.\n   */\n  init(workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_, '$');\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    this.isInitialized = true;\n  };\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   * @param {string} code Generated code.\n   * @return {string} Completed code.\n   */\n  finish(code) {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  };\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   * @param {string} line Line of generated code.\n   * @return {string} Legal line of code.\n   */\n  scrubNakedValue(line) {\n    return line + ';\\n';\n  };\n\n  /**\n   * Encode a string as a properly escaped PHP string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} PHP string.\n   * @protected\n   */\n  quote_(string) {\n    string = string.replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\\\n')\n        .replace(/'/g, '\\\\\\'');\n    return '\\'' + string + '\\'';\n  };\n\n  /**\n   * Encode a string as a properly escaped multiline PHP string, complete with\n   * quotes.\n   * @param {string} string Text to encode.\n   * @return {string} PHP string.\n   * @protected\n   */\n  multiline_quote_(string) {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // . \"\\n\" .\n    // Newline escaping only works in double-quoted strings.\n    return lines.join(' . \\\"\\\\n\\\" .\\n');\n  };\n\n  /**\n   * Common tasks for generating PHP from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param {!Block} block The current block.\n   * @param {string} code The PHP code created for this block.\n   * @param {boolean=} opt_thisOnly True to generate code for only this\n   *     statement.\n   * @return {string} PHP code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block, code, opt_thisOnly) {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment, '// ') + '\\n';\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n        block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  };\n\n  /**\n   * Gets a property and adjusts the value while taking into account indexing.\n   * @param {!Block} block The block.\n   * @param {string} atId The property ID of the element to get.\n   * @param {number=} opt_delta Value to add.\n   * @param {boolean=} opt_negate Whether to negate the value.\n   * @param {number=} opt_order The highest order acting on this value.\n   * @return {string|number}\n   */\n  getAdjusted(block, atId, opt_delta, opt_negate, opt_order) {\n    let delta = opt_delta || 0;\n    let order = opt_order || this.ORDER_NONE;\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    let defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    let outerOrder = order;\n    let innerOrder;\n    if (delta > 0) {\n      outerOrder = this.ORDER_ADDITION;\n      innerOrder = this.ORDER_ADDITION;\n    } else if (delta < 0) {\n      outerOrder = this.ORDER_SUBTRACTION;\n      innerOrder = this.ORDER_SUBTRACTION;\n    } else if (opt_negate) {\n      outerOrder = this.ORDER_UNARY_NEGATION;\n      innerOrder = this.ORDER_UNARY_NEGATION;\n    }\n    let at = this.valueToCode(block, atId, outerOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = Number(at) + delta;\n      if (opt_negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = at + ' + ' + delta;\n      } else if (delta < 0) {\n        at = at + ' - ' + -delta;\n      }\n      if (opt_negate) {\n        if (delta) {\n          at = '-(' + at + ')';\n        } else {\n          at = '-' + at;\n        }\n      }\n      innerOrder = Math.floor(innerOrder);\n      order = Math.floor(order);\n      if (innerOrder && order >= innerOrder) {\n        at = '(' + at + ')';\n      }\n    }\n    return at;\n  };\n}\n\n/**\n * PHP code generator.\n * @type {!PhpGenerator}\n */\nexport const phpGenerator = new PhpGenerator();\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for colour blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.colour');\n\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['colour_picker'] = function(block, generator) {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n};\n\nphpGenerator.forBlock['colour_random'] = function(block, generator) {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_('colour_random', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);\n}\n`);\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['colour_rgb'] = function(block, generator) {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_('colour_rgb', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($r, $g, $b) {\n  $r = round(max(min($r, 100), 0) * 2.55);\n  $g = round(max(min($g, 100), 0) * 2.55);\n  $b = round(max(min($b, 100), 0) * 2.55);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`);\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['colour_blend'] = function(block, generator) {\n  // Blend two colours together.\n  const c1 =\n      generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 =\n      generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_('colour_blend', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($c1, $c2, $ratio) {\n  $ratio = max(min($ratio, 1), 0);\n  $r1 = hexdec(substr($c1, 1, 2));\n  $g1 = hexdec(substr($c1, 3, 2));\n  $b1 = hexdec(substr($c1, 5, 2));\n  $r2 = hexdec(substr($c2, 1, 2));\n  $g2 = hexdec(substr($c2, 3, 2));\n  $b2 = hexdec(substr($c2, 5, 2));\n  $r = round($r1 * (1 - $ratio) + $r2 * $ratio);\n  $g = round($g1 * (1 - $ratio) + $g2 * $ratio);\n  $b = round($b1 * (1 - $ratio) + $b2 * $ratio);\n  $hex = '#';\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\n  return $hex;\n}\n`);\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for list blocks.\n */\n\n/**\n * Lists in PHP are known to break when non-variables are passed into blocks\n * that require a list. PHP, unlike other languages, passes arrays as reference\n * value instead of value so we are unable to support it to the extent we can\n * for the other languages.\n * For example, a ternary operator with two arrays will return the array by\n * value and that cannot be passed into any of the built-in array functions for\n * PHP (because only variables can be passed by reference).\n * ex:  end(true ? list1 : list2)\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.generator.lists');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\nphpGenerator.forBlock['lists_create_empty'] = function(block, generator) {\n  // Create an empty list.\n  return ['array()', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_create_with'] = function(block, generator) {\n  // Create a list with any number of elements of any type.\n  let code = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    code[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  code = 'array(' + code.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_repeat'] = function(block, generator) {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_('lists_repeat', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value, $count) {\n  $array = array();\n  for ($index = 0; $index < $count; $index++) {\n    $array[] = $value;\n  }\n  return $array;\n}\n`);\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_length'] = function(block, generator) {\n  // String or array length.\n  const functionName = generator.provideFunction_('length', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\n  if (is_string($value)) {\n    return strlen($value);\n  } else {\n    return count($value);\n  }\n}\n`);\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return [functionName + '(' + list + ')', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.FUNCTION_CALL)\n      || 'array()';\n  return ['empty(' + argument0 + ')', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_indexOf'] = function(block, generator) {\n  // Find an item in the list.\n  const argument0 = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const argument1 =\n      generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  let errorIndex = ' -1';\n  let indexAdjustment = '';\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    indexAdjustment = ' + 1';\n  }\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    // indexOf\n    functionName = generator.provideFunction_('indexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\n  for ($index = 0; $index < count($haystack); $index++) {\n    if ($haystack[$index] == $needle) return $index${indexAdjustment};\n  }\n  return ${errorIndex};\n}\n`);\n  } else {\n    // lastIndexOf\n    functionName = generator.provideFunction_('lastIndexOf', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\n  $last = ${errorIndex};\n  for ($index = 0; $index < count($haystack); $index++) {\n    if ($haystack[$index] == $needle) $last = $index${indexAdjustment};\n  }\n  return $last;\n}\n`);\n  }\n\n  const code = functionName + '(' + argument1 + ', ' + argument0 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_getIndex'] = function(block, generator) {\n  // Get element at index.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_shift(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_shift(' + list + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'end(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_pop(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_pop(' + list + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const code = 'array_splice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case 'FROM_END':\n      if (mode === 'GET') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const at = generator.getAdjusted(block, 'AT', 1, true);\n        const code = 'array_slice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\n        const list =\n            generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n        const at =\n            generator.getAdjusted(block, 'AT', 1, false, Order.SUBTRACTION);\n        const code = 'array_splice(' + list + ', count(' + list + ') - ' + at +\n            ', 1)[0]';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + ';\\n';\n        }\n      }\n      break;\n    case 'RANDOM': {\n      const list =\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\n      if (mode === 'GET') {\n        const functionName =\n            generator.provideFunction_('lists_get_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\n  return $list[rand(0,count($list)-1)];\n}\n`);\n        const code = functionName + '(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const functionName =\n            generator.provideFunction_('lists_get_remove_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\n  $x = rand(0,count($list)-1);\n  unset($list[$x]);\n  return array_values($list);\n}\n`);\n        const code = functionName + '(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        const functionName =\n            generator.provideFunction_('lists_remove_random_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\n  unset($list[rand(0,count($list)-1)]);\n}\n`);\n        return functionName + '(' + list + ');\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nphpGenerator.forBlock['lists_setIndex'] = function(block, generator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value =\n      generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  let cachedList;\n  function cacheList() {\n    if (cachedList.match(/^\\$\\w+$/)) {\n      return '';\n    }\n    const listVar =\n        generator.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    const code = listVar + ' = &' + cachedList + ';\\n';\n    cachedList = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n        return 'array_unshift(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    case 'LAST': {\n      const list =\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      if (mode === 'SET') {\n        const functionName =\n            generator.provideFunction_('lists_set_last_item', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $value) {\n  $list[count($list) - 1] = $value;\n}\n`);\n        return functionName + '(' + list + ', ' + value + ');\\n';\n      } else if (mode === 'INSERT') {\n        return 'array_push(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        const list =\n            generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const list =\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      const at = generator.getAdjusted(block, 'AT', 1);\n      if (mode === 'SET') {\n        const functionName =\n            generator.provideFunction_('lists_set_from_end', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\n  $list[count($list) - $at] = $value;\n}\n`);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      } else if (mode === 'INSERT') {\n        const functionName =\n            generator.provideFunction_('lists_insert_from_end', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\n  return array_splice($list, count($list) - $at, 0, $value);\n}\n`);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      cachedList =\n          generator.valueToCode(block, 'LIST', Order.REFERENCE) || 'array()';\n      let code = cacheList();\n      const list = cachedList;\n      const xVar =\n          generator.nameDB_.getDistinctName('tmp_x', NameType.VARIABLE);\n      code += xVar + ' = rand(0, count(' + list + ')-1);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += 'array_splice(' + list + ', ' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nphpGenerator.forBlock['lists_getSublist'] = function(block, generator) {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list;\n  } else if (\n      list.match(/^\\$\\w+$/) ||\n      (where1 !== 'FROM_END' && where2 === 'FROM_START')) {\n    // If the list is a simple value or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 =\n            generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = 'count(' + list + ') - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    let length;\n    switch (where2) {\n      case 'FROM_START':\n        at2 =\n            generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        length = at2 + ' - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        length += ' + 1';\n        break;\n      case 'FROM_END':\n        at2 =\n            generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        length = 'count(' + list + ') - ' + at2 + ' - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      case 'LAST':\n        length = 'count(' + list + ') - ';\n        if (stringUtils.isNumber(String(at1)) ||\n            String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = 'array_slice(' + list + ', ' + at1 + ', ' + length + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName =\n        generator.provideFunction_('lists_get_sublist', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $where1, $at1, $where2, $at2) {\n  if ($where1 == 'FROM_END') {\n    $at1 = count($list) - 1 - $at1;\n  } else if ($where1 == 'FIRST') {\n    $at1 = 0;\n  } else if ($where1 != 'FROM_START') {\n    throw new Exception('Unhandled option (lists_get_sublist).');\n  }\n  $length = 0;\n  if ($where2 == 'FROM_START') {\n    $length = $at2 - $at1 + 1;\n  } else if ($where2 == 'FROM_END') {\n    $length = count($list) - $at1 - $at2;\n  } else if ($where2 == 'LAST') {\n    $length = count($list) - $at1;\n  } else {\n    throw new Exception('Unhandled option (lists_get_sublist).');\n  }\n  return array_slice($list, $at1, $length);\n}\n`);\n    code = functionName + '(' + list + ', \\'' + where1 + '\\', ' + at1 + ', \\'' +\n        where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_sort'] = function(block, generator) {\n  // Block for sorting a list.\n  const listCode =\n      generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const functionName = generator.provideFunction_('lists_sort', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $type, $direction) {\n  $sortCmpFuncs = array(\n    'NUMERIC' => 'strnatcasecmp',\n    'TEXT' => 'strcmp',\n    'IGNORE_CASE' => 'strcasecmp'\n  );\n  $sortCmp = $sortCmpFuncs[$type];\n  $list2 = $list;\n  usort($list2, $sortCmp);\n  if ($direction == -1) {\n    $list2 = array_reverse($list2);\n  }\n  return $list2;\n}\n`);\n  const sortCode =\n      functionName + '(' + listCode + ', \"' + type + '\", ' + direction + ')';\n  return [sortCode, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_split'] = function(block, generator) {\n  // Block for splitting text into a list, or joining a list into text.\n  let value_input = generator.valueToCode(block, 'INPUT', Order.NONE);\n  const value_delim =\n      generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!value_input) {\n      value_input = \"''\";\n    }\n    functionName = 'explode';\n  } else if (mode === 'JOIN') {\n    if (!value_input) {\n      value_input = 'array()';\n    }\n    functionName = 'implode';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + value_delim + ', ' + value_input + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['lists_reverse'] = function(block, generator) {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'array_reverse(' + list + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for logic blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.logic');\n\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['controls_if'] = function(block, generator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '', branchCode, conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n        generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') + 'if (' + conditionCode + ') {\\n' +\n        branchCode + '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n          generator.prefixLines(\n            generator.injectId(generator.STATEMENT_SUFFIX, block),\n            generator.INDENT) +\n          branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nphpGenerator.forBlock['controls_ifelse'] = phpGenerator.forBlock['controls_if'];\n\nphpGenerator.forBlock['logic_compare'] = function(block, generator) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '!=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const order = (operator === '==' || operator === '!=') ? Order.EQUALITY :\n                                                           Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nphpGenerator.forBlock['logic_operation'] = function(block, generator) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? '&&' : '||';\n  const order =\n      (operator === '&&') ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nphpGenerator.forBlock['logic_negate'] = function(block, generator) {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n};\n\nphpGenerator.forBlock['logic_boolean'] = function(block, generator) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n};\n\nphpGenerator.forBlock['logic_null'] = function(block, generator) {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n};\n\nphpGenerator.forBlock['logic_ternary'] = function(block, generator) {\n  // Ternary operator.\n  const value_if =\n      generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n      generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\n  const value_else =\n      generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for loop blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.loops');\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['controls_repeat_ext'] = function(block, generator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar =\n        generator.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar =\n        generator.nameDB_.getDistinctName('repeat_end', NameType.VARIABLE);\n    code += endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (' + loopVar + ' = 0; ' + loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' + branch + '}\\n';\n  return code;\n};\n\nphpGenerator.forBlock['controls_repeat'] =\n    phpGenerator.forBlock['controls_repeat_ext'];\n\nphpGenerator.forBlock['controls_whileUntil'] = function(block, generator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      generator.valueToCode(\n          block, 'BOOL', until ? Order.LOGICAL_NOT : Order.NONE) ||\n      'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nphpGenerator.forBlock['controls_for'] = function(block, generator) {\n  // For loop.\n  const variable0 =\n      generator.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n        generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 =\n        generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment =\n        generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (stringUtils.isNumber(argument0) && stringUtils.isNumber(argument1) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 +\n        (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_start', NameType.VARIABLE);\n      code += startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar =\n          generator.nameDB_.getDistinctName(\n            variable0 + '_end', NameType.VARIABLE);\n      code += endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar =\n        generator.nameDB_.getDistinctName(\n          variable0 + '_inc', NameType.VARIABLE);\n    code += incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' + incVar +\n        ' >= 0 ? ' + variable0 + ' <= ' + endVar + ' : ' + variable0 +\n        ' >= ' + endVar + '; ' + variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nphpGenerator.forBlock['controls_forEach'] = function(block, generator) {\n  // For each loop.\n  const variable0 =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 =\n      generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  code +=\n      'foreach (' + argument0 + ' as ' + variable0 + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nphpGenerator.forBlock['controls_flow_statements'] = function(block, generator) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for math blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.math');\n\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['math_number'] = function(block, generator) {\n  // Numeric value.\n  let code = Number(block.getFieldValue('NUM'));\n  const order = code >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;\n  if (code === Infinity) {\n    code = 'INF';\n  } else if (code === -Infinity) {\n    code = '-INF';\n  }\n  return [code, order];\n};\n\nphpGenerator.forBlock['math_arithmetic'] = function(block, generator) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [' ** ', Order.POWER],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nphpGenerator.forBlock['math_single'] = function(block, generator) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'sin(' + arg + ' / 180 * pi())';\n      break;\n    case 'COS':\n      code = 'cos(' + arg + ' / 180 * pi())';\n      break;\n    case 'TAN':\n      code = 'tan(' + arg + ' / 180 * pi())';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'log(' + arg + ') / log(10)';\n      break;\n    case 'ASIN':\n      code = 'asin(' + arg + ') / pi() * 180';\n      break;\n    case 'ACOS':\n      code = 'acos(' + arg + ') / pi() * 180';\n      break;\n    case 'ATAN':\n      code = 'atan(' + arg + ') / pi() * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n};\n\nphpGenerator.forBlock['math_constant'] = function(block, generator) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['M_PI', Order.ATOMIC],\n    'E': ['M_E', Order.ATOMIC],\n    'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['M_SQRT2', Order.ATOMIC],\n    'SQRT1_2': ['M_SQRT1_2', Order.ATOMIC],\n    'INFINITY': ['INF', Order.ATOMIC],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nphpGenerator.forBlock['math_number_property'] = function(block, generator) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': ['', ' % 2 == 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': ['', ' % 2 == 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': ['is_int(', ')', Order.NONE, Order.FUNCTION_CALL],\n    'POSITIVE': ['', ' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': ['', ' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [prefix, suffix, inputOrder, outputOrder] =\n      PROPERTIES[dropdownProperty];\n  const numberToCheck = generator.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_('math_isPrime', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if ($n == 2 || $n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 || $n % 3 == 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {\n    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = generator.valueToCode(block, 'DIVISOR',\n        Order.MODULUS) || '0';\n    if (divisor === '0') {\n      return ['false', Order.ATOMIC];\n\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = prefix + numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nphpGenerator.forBlock['math_change'] = function(block, generator) {\n  // Add to a variable in place.\n  const argument0 =\n      generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' += ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nphpGenerator.forBlock['math_round'] = phpGenerator.forBlock['math_single'];\n// Trigonometry functions have a single operand.\nphpGenerator.forBlock['math_trig'] = phpGenerator.forBlock['math_single'];\n\nphpGenerator.forBlock['math_on_list'] = function(block, generator) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'array_sum(' + list + ')';\n      break;\n    case 'MIN':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      list =\n          generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL)\n          || 'array()';\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      const functionName = generator.provideFunction_('math_mean', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($myList) {\n  return array_sum($myList) / count($myList);\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      const functionName = generator.provideFunction_('math_median', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($arr) {\n  sort($arr,SORT_NUMERIC);\n  return (count($arr) % 2) ? $arr[floor(count($arr) / 2)] :\n      ($arr[floor(count($arr) / 2)] + $arr[floor(count($arr) / 2) - 1]) / 2;\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_('math_modes', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($values) {\n  if (empty($values)) return array();\n  $counts = array_count_values($values);\n  arsort($counts); // Sort counts in descending order\n  $modes = array_keys($counts, current($counts), true);\n  return $modes;\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName =\n          generator.provideFunction_('math_standard_deviation', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($numbers) {\n  $n = count($numbers);\n  if (!$n) return null;\n  $mean = array_sum($numbers) / count($numbers);\n  foreach($numbers as $key => $num) $devs[$key] = pow($num - $mean, 2);\n  return sqrt(array_sum($devs) / (count($devs) - 1));\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_('math_random_list', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\n  $x = rand(0, count($list)-1);\n  return $list[$x];\n}\n`);\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['math_modulo'] = function(block, generator) {\n  // Remainder computation.\n  const argument0 =\n      generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\n  const argument1 =\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n};\n\nphpGenerator.forBlock['math_constrain'] = function(block, generator) {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n      generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\n  const code =\n      'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['math_random_int'] = function(block, generator) {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_('math_random_int', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($a, $b) {\n  if ($a > $b) {\n    return rand($b, $a);\n  }\n  return rand($a, $b);\n}\n`);\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['math_random_float'] = function(block, generator) {\n  // Random fraction between 0 and 1.\n  return ['(float)rand()/(float)getrandmax()', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['math_atan2'] = function(block, generator) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'atan2(' + argument1 + ', ' + argument0 + ') / pi() * 180',\n    Order.DIVISION\n  ];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for procedure blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.procedures');\n\nimport * as Variables from '../../core/variables.js';\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['procedures_defreturn'] = function(block, generator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (let i = 0, variable; variable = usedVariables[i]; i++) {\n    const varName = variable.name;\n    if (block.getVars().indexOf(varName) === -1) {\n      globals.push(generator.nameDB_.getName(varName, NameType.VARIABLE));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n        generator.nameDB_.getName(\n          devVarList[i], NameType.DEVELOPER_VARIABLE));\n  }\n  const globalStr =\n      globals.length ?\n      generator.INDENT + 'global ' + globals.join(', ') + ';\\n' : '';\n\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n        generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n        generator.INDENT);\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      globalStr + xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  generator.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nphpGenerator.forBlock['procedures_defnoreturn'] =\n    phpGenerator.forBlock['procedures_defreturn'];\n\nphpGenerator.forBlock['procedures_callreturn'] = function(block, generator) {\n  // Call a procedure with a return value.\n  const funcName =\n      generator.nameDB_.getName(\n        block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['procedures_callnoreturn'] = function(block, generator) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator);\n  return tuple[0] + ';\\n';\n};\n\nphpGenerator.forBlock['procedures_ifreturn'] = function(block, generator) {\n  // Conditionally return value from a procedure.\n  const condition =\n      generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code +=\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for text blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.texts');\n\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['text'] = function(block, generator) {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n};\n\nphpGenerator.forBlock['text_multiline'] = function(block, generator) {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('.') !== -1 ? Order.STRING_CONCAT : Order.ATOMIC;\n  return [code, order];\n};\n\nphpGenerator.forBlock['text_join'] = function(block, generator) {\n  // Create a string made up of any number of elements of any type.\n  if (block.itemCount_ === 0) {\n    return [\"''\", Order.ATOMIC];\n  } else if (block.itemCount_ === 1) {\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n    const code = element;\n    return [code, Order.NONE];\n  } else if (block.itemCount_ === 2) {\n    const element0 =\n        generator.valueToCode(block, 'ADD0', Order.STRING_CONCAT) || \"''\";\n    const element1 =\n        generator.valueToCode(block, 'ADD1', Order.STRING_CONCAT) || \"''\";\n    const code = element0 + ' . ' + element1;\n    return [code, Order.STRING_CONCAT];\n  } else {\n    const elements = new Array(block.itemCount_);\n    for (let i = 0; i < block.itemCount_; i++) {\n      elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n    }\n    const code = 'implode(\\'\\', array(' + elements.join(',') + '))';\n    return [code, Order.FUNCTION_CALL];\n  }\n};\n\nphpGenerator.forBlock['text_append'] = function(block, generator) {\n  // Append to a variable in place.\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value =\n      generator.valueToCode(block, 'TEXT', Order.ASSIGNMENT) || \"''\";\n  return varName + ' .= ' + value + ';\\n';\n};\n\nphpGenerator.forBlock['text_length'] = function(block, generator) {\n  // String or array length.\n  const functionName = generator.provideFunction_('length', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\n  if (is_string($value)) {\n    return strlen($value);\n  }\n  return count($value);\n}\n`);\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return [functionName + '(' + text + ')', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_isEmpty'] = function(block, generator) {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['empty(' + text + ')', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_indexOf'] = function(block, generator) {\n  // Search the text for a substring.\n  const operator =\n      block.getFieldValue('END') === 'FIRST' ? 'strpos' : 'strrpos';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let indexAdjustment = '';\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    indexAdjustment = ' + 1';\n  }\n  const functionName = generator.provideFunction_(\n      block.getFieldValue('END') === 'FIRST' ? 'text_indexOf' :\n                                               'text_lastIndexOf',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $search) {\n  $pos = ${operator}($text, $search);\n  return $pos === false ? ${errorIndex} : $pos${indexAdjustment};\n}\n`);\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_charAt'] = function(block, generator) {\n  // Get letter at index.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = (where === 'RANDOM') ? Order.NONE : Order.NONE;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = 'substr(' + text + ', 0, 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = 'substr(' + text + ', -1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      const code = 'substr(' + text + ', ' + at + ', 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = 'substr(' + text + ', ' + at + ', 1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_('text_random_letter', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text) {\n  return $text[rand(0, strlen($text) - 1)];\n}\n`);\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nphpGenerator.forBlock['text_getSubstring'] = function(block, generator) {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    const code = text;\n    return [code, Order.NONE];\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    const functionName = generator.provideFunction_('text_get_substring', `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $where1, $at1, $where2, $at2) {\n  if ($where1 == 'FROM_END') {\n    $at1 = strlen($text) - 1 - $at1;\n  } else if ($where1 == 'FIRST') {\n    $at1 = 0;\n  } else if ($where1 != 'FROM_START') {\n    throw new Exception('Unhandled option (text_get_substring).');\n  }\n  $length = 0;\n  if ($where2 == 'FROM_START') {\n    $length = $at2 - $at1 + 1;\n  } else if ($where2 == 'FROM_END') {\n    $length = strlen($text) - $at1 - $at2;\n  } else if ($where2 == 'LAST') {\n    $length = strlen($text) - $at1;\n  } else {\n    throw new Exception('Unhandled option (text_get_substring).');\n  }\n  return substr($text, $at1, $length);\n}\n`);\n    const code = functionName + '(' + text + ', \\'' + where1 + '\\', ' + at1 +\n        ', \\'' + where2 + '\\', ' + at2 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n};\n\nphpGenerator.forBlock['text_changeCase'] = function(block, generator) {\n  // Change capitalization.\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  let code;\n  if (block.getFieldValue('CASE') === 'UPPERCASE') {\n    code = 'strtoupper(' + text + ')';\n  } else if (block.getFieldValue('CASE') === 'LOWERCASE') {\n    code = 'strtolower(' + text + ')';\n  } else if (block.getFieldValue('CASE') === 'TITLECASE') {\n    code = 'ucwords(strtolower(' + text + '))';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_trim'] = function(block, generator) {\n  // Trim spaces.\n  const OPERATORS = {'LEFT': 'ltrim', 'RIGHT': 'rtrim', 'BOTH': 'trim'};\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return [operator + '(' + text + ')', Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_print'] = function(block, generator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ');\\n';\n};\n\nphpGenerator.forBlock['text_prompt_ext'] = function(block, generator) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'readline(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'floatval(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_prompt'] = phpGenerator.forBlock['text_prompt_ext'];\n\nphpGenerator.forBlock['text_count'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = 'strlen(' + sub + ') === 0' +\n      ' ? strlen(' + text + ') + 1' +\n      ' : substr_count(' + text + ', ' + sub + ')';\n  return [code, Order.CONDITIONAL];\n};\n\nphpGenerator.forBlock['text_replace'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = 'str_replace(' + from + ', ' + to + ', ' + text + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n\nphpGenerator.forBlock['text_reverse'] = function(block, generator) {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'strrev(' + text + ')';\n  return [code, Order.FUNCTION_CALL];\n};\n","/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.variables');\n\nimport {NameType} from '../../core/names.js';\nimport {phpGenerator, Order} from '../php.js';\n\n\nphpGenerator.forBlock['variables_get'] = function(block, generator) {\n  // Variable getter.\n  const code =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Order.ATOMIC];\n};\n\nphpGenerator.forBlock['variables_set'] = function(block, generator) {\n  // Variable setter.\n  const argument0 =\n      generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName =\n      generator.nameDB_.getName(\n        block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for dynamic variable blocks.\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.variablesDynamic');\n\nimport {phpGenerator} from '../php.js';\nimport './variables.js';\n\n\n// generator is dynamically typed.\nphpGenerator.forBlock['variables_get_dynamic'] =\n    phpGenerator.forBlock['variables_get'];\nphpGenerator.forBlock['variables_set_dynamic'] =\n    phpGenerator.forBlock['variables_set'];\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating PHP for\n *     blocks.  This is the entrypoint for php_compressed.js.\n * @suppress {extraRequire}\n */\n\nimport * as goog from '../../closure/goog/goog.js';\ngoog.declareModuleId('Blockly.PHP.all');\n\nimport './colour.js';\nimport './lists.js';\nimport './logic.js';\nimport './loops.js';\nimport './math.js';\nimport './procedures.js';\nimport './text.js';\nimport './variables.js';\nimport './variables_dynamic.js';\n\nexport * from '../php.js';\n"]}